{
	"component": "Designer",
	"state": "getGeneratedModel",
	"action": "function getGeneratedModel(model) { \n  var modelDef = null,\n      result = {},\n      i = 0,\n      length = 0,\n      propName = '';\n\n  function _getInherit(name, schemas) {\n      var result = '',\n          id = '';\n\n      for (id in schemas) {\n          if (schemas[id]._name === name) {\n              result = schemas[id]._inherit;\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _getModelDef(name, models) {\n      var result = '',\n          id = '';\n\n      for (id in models) {\n          if (models[id]._name === name) {\n              result = models[id];\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _searchParents(parents, states, models, schemas) {\n      var parent = '',\n          modelDef = null,\n          i = 0,\n          length = 0;\n\n      length = parents.length;\n      for (i = 0; i < length; i++) {\n          parent = parents[i];\n          if (parent === 'RuntimeComponent') {\n              result.init = {\n                  \"params\": [{\n                      \"name\": \"conf\",\n                      \"type\": \"object\"\n                  }]\n              };\n\n              result.destroy = {\n                  \"params\": []\n              };\n\n              result.error = {\n                  \"params\": [{\n                      \"name\": \"data\",\n                      \"type\": \"errorParam\"\n                  }]\n              };\n\n          } else {\n              modelDef = _getModelDef(parent, models);\n\n              for (propName in modelDef) {\n                  if (propName.indexOf('_') !== 0 && typeof result[propName] === 'undefined') {\n                      result[propName] = modelDef[propName];\n                  }\n              }\n\n              if (_getInherit(parent, schemas)) {\n                  _searchParents(_getInherit(parent, schemas), result, models, schemas);\n              }\n          }\n      }\n  }\n\n  modelDef = _getModelDef(model, this.system().models());\n\n  for (propName in modelDef) {\n      if (propName.indexOf('_') !== 0) {\n          result[propName] = modelDef[propName];\n      }\n  }\n\n  if (_getInherit(model, this.system().schemas())) {\n      _searchParents(_getInherit(model, this.system().schemas()), result, this.system().models(), this.system().schemas());\n  }\n\n  return result;\n}"
}