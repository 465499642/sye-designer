{
	"component": "163a01b7ca1935e",
	"state": "click",
	"action": "function click() {\n    $('#designer-toolbar-item-export').tooltip('hide');\n    var message = this.require('message');\n    var Dialog = this.require('DialogExport');\n    \n    if (this.require('designer').system()) {\n      var dialog = new Dialog({\n          'title': 'Export the current system',\n      });\n      dialog.show();\n      \n      dialog.on('ok', function () {\n          var message = this.require('message');\n          // code inspired from the blog post\n          // https://thiscouldbebetter.wordpress.com/2012/12/18/loading-editing-and-saving-a-text-file-in-html5-using-javascrip/\n          if (this.require('designer').system()) {\n              var system = null,\n              textToWrite = null,\n              textFileAsBlob = null,\n              fileNameToSaveAs = null,\n              downloadLink = null,\n              js = '';\n              source = '',\n              DialogShare = this.require('DialogShare');\n              \n              system = this.require('db').collections().System.find({\n                  '_id': this.require('designer').system().id()\n              })[0];\n              system = JSON.parse(JSON.stringify(system));\n              delete system.classInfo;\n              \n              if ($('#designer-dialog-export-url').prop(\"checked\")) {\n                  this.hide();\n  \n                  DialogShare = new DialogShare({\n                      'title': 'Copy the link to the system'\n                  });\n                  DialogShare.show();\n                  DialogShare.on('ok', function () {\n                      this.hide();\n                  });\n                  \n              } else {\n              \n                  if ($('#designer-dialog-export-json').prop(\"checked\")) {\n                      system = JSON.parse(JSON.stringify(system));\n                      \n                      if ($('#designer-dialog-export-isMaster').prop('checked')) {\n                        system.master = true;\n                      } else {\n                        system.master = false;\n                      }\n                      if ($('#designer-dialog-export-isSubsystem').prop('checked')) {\n                        system.subsystem = true;\n                      } else {\n                        system.subsystem = false;\n                      }\n                      textToWrite = JSON.stringify(system);\n                      fileNameToSaveAs = this.require('designer').system().name() + '.json';\n                  }\n                  \n                  if ($('#designer-dialog-export-javascript').prop('checked')) {\n                      source = decodeURIComponent(this.require('javascript-export.js').source());\n                      source = source\n                                  .replace(/{{version}}/g, this.require('designer').system().version())\n                                  .replace(/{{description}}/g, this.require('designer').system().description().replace(/\\n/g, '\\n * '))\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val());\n                                  \n                      // SYSTEM\n                      \n                      var confSystem = {};\n                      \n                      confSystem._id = system._id;\n                      confSystem.name = system.name;\n                      confSystem.version = system.version;\n                      confSystem.description = system.description;\n                      \n                      source = source + '/**\\n';\n                      source = source + ' * System ' +  confSystem.name + '\\n';\n                      source = source + ' * @system\\n';\n                      source = source + ' */\\n';\n                      source = source + 'const system = runtime.system(' + JSON.stringify(confSystem, null, '\\t', 2) + ');\\n\\n';\n                      \n                      // SCHEMA / MODEL / TYPE     \n                      if (Object.keys(system.schemas).length > 0 || Object.keys(system.types).length > 0) {\n                        source = source + '\\n// Schemas, models and types creation\\n\\n\\n';\n                        source = source + 'const metamodel = runtime.require(\\'metamodel\\');\\n\\n';\n                      }\n                      \n                      var name = '';\n                      var schemaSorted = [];\n                      var schemaNameSorted = [];\n                      var schemaName = {};\n                      \n                      for (name in system.schemas) {\n                        schemaSorted.push(system.schemas[name]);\n                        schemaNameSorted.push(system.schemas[name]._name);\n                        schemaName[system.schemas[name]._name] = system.schemas[name]._name;\n                      }\n                      schemaSorted.sort(function (schemaA, schemaB) {\n                        return schemaA._name > schemaB._name;\n                      });\n                      schemaNameSorted.sort();\n                      \n                      schemaSorted.forEach(function (schema) {\n                        source = source + '/**\\n';\n                        source = source + ' * Schema ' +  schema._name + '\\n';\n                        source = source + ' * @schema\\n';\n                        source = source + ' */\\n';\n                        source = source + 'metamodel.schema(' + JSON.stringify(schema, null, '\\t', 2) + ');\\n\\n';\n                      });\n                      \n                      var modelSorted = [];\n                      var modelNameSorted = [];\n                      for (name in system.models) {\n                        modelSorted.push(system.models[name]);\n                        modelNameSorted.push(system.models[name]._name);\n                      }\n                      modelSorted.sort(function (modelA, modelB) {\n                        return modelA._name > modelB._name;\n                      });\n                      modelNameSorted.sort();\n                      \n                      modelSorted.forEach(function (model) {\n                        source = source + '/**\\n';\n                        source = source + ' * Model ' +  model._name + '\\n';\n                        source = source + ' * @model\\n';\n                        source = source + ' */\\n';\n                        source = source + 'metamodel.model(' + JSON.stringify(model, null, '\\t', 2) + ');\\n\\n';\n                      });\n                      \n                      var typeSorted = [];\n                      var typeNameSorted = [];\n                      for (name in system.types) {\n                        typeSorted.push(system.types[name]);\n                        typeNameSorted.push(system.types[name].name);\n                      }\n                      typeSorted.sort(function (typeA, typeB) {\n                        return typeA.name > typeB.name;\n                      });\n                      typeNameSorted.sort();\n                      \n                      typeSorted.forEach(function (type) {\n                        source = source + '/**\\n';\n                        source = source + ' * Type ' + type.name + '\\n';\n                        source = source + ' * @type\\n';\n                        source = source + ' */\\n';\n                        source = source + 'metamodel.type(' + JSON.stringify(type, null, '\\t', 2) + ');\\n\\n';\n                      });\n                      \n                      if (Object.keys(system.schemas).length > 0 || Object.keys(system.models).length > 0 || Object.keys(system.types).length > 0) {\n                        source = source + 'metamodel.create();\\n\\n';\n                      }\n                      \n                      // CLASS\n                      if (Object.keys(system.schemas).length > 0) {\n                        source = source + '\\n// Classes creation\\n\\n\\n';\n                      }\n                      schemaNameSorted.forEach(function(schema) {\n                        source = source + '/**\\n';\n                        source = source + ' * Class ' +  schema + '\\n';\n                        source = source + ' * @class\\n';\n                        source = source + ' */\\n';\n                        source = source + 'const ' + schema + ' = runtime.require(\\'' + schema + '\\');\\n\\n'; \n                      });\n                      \n                      // COMPONENT   \n                      if (Object.keys(system.components).length > 0) {\n                        source = source + '\\n// Components creation\\n\\n\\n';\n                      }\n                      schemaNameSorted.forEach(function (collection) {\n                        for (name in system.components[collection]) {\n                          source = source + '/**\\n';\n                          source = source + ' * Component ' +  system.components[collection][name]._id + '\\n';\n                          source = source + ' * @component\\n';\n                          source = source + ' */\\n';\n                          source = source + 'new ' + collection + '(' + JSON.stringify(system.components[collection][name], null, '\\t', 2) + ');\\n\\n';\n                        }\n                      });\n                      \n                      // BEHAVIOR   \n                      if (Object.keys(system.behaviors).length > 0) {\n                        source = source + '\\n// Behaviors creation\\n\\n\\n';\n                      }\n                      \n                      var behaviors = {};\n                      var behaviorsComponentNameSorted = [];\n                      var modelsByName = {};\n                      \n                      for (name in system.behaviors) {\n                        if (typeof behaviors[system.behaviors[name].component] === 'undefined') {\n                          behaviors[system.behaviors[name].component] = [];\n                        }\n                        behaviors[system.behaviors[name].component].push(system.behaviors[name]);\n                      }\n                  \n                      behaviorsComponentNameSorted = Object.keys(behaviors);\n                      behaviorsComponentNameSorted.sort();\n                      \n                      var id = '';\n                      for (id in system.models) {\n                        modelsByName[system.models[id]._name] = system.models[id];  \n                      }\n                      \n                      behaviorsComponentNameSorted.forEach(function forEach(componentName) {\n                        var componentBehaviors = behaviors[componentName];\n                        \n                        componentBehaviors.sort(function sort(behaviorA, behaviorB) {\n                          return behaviorA.state > behaviorB.state;\n                        });\n                        \n                        if (componentBehaviors.length > 0) {\n                          if (componentName === system._id) {\n                            source = source + '// system behaviors\\n\\n';\n                          } else {\n                            source = source + '// ' + componentName + ' behaviors\\n\\n';\n                          }\n                        }\n                        \n                        componentBehaviors.forEach(function forEach(behavior) {\n                          var useCoreAPI = typeof behavior.useCoreAPI !== 'undefined' ? behavior.useCoreAPI : false;\n                          var core = typeof behavior.core !== 'undefined' ? behavior.core : false;\n                          var comp = '';\n                          var behaviorParamDef = {};\n                          var options = ');\\n\\n';\n                          \n                          if (useCoreAPI && !core) {\n                            options = ', true);\\n\\n';\n                          }\n                          if (useCoreAPI && core) {\n                            options = ', true, true);\\n\\n';\n                          }\n                          \n                          source = source + '/**\\n';\n                          source = source + ' * @method ' + behavior.state  + '\\n';\n                          \n                          if (modelsByName[behavior.component] && modelsByName[behavior.component][behavior.state] && modelsByName[behavior.component][behavior.state].params) {\n                            modelsByName[behavior.component][behavior.state].params.forEach(function forEach(param) {\n                              source = source + ' * @param {' + param.type  + '} '  + param.name + '\\n';    \n                            });\n                          }\n                          if (modelsByName[behavior.component] && modelsByName[behavior.component][behavior.state] && modelsByName[behavior.component][behavior.state].result) {\n                              source = source + ' * @returns {' + modelsByName[behavior.component][behavior.state].result  + '} \\n';    \n                          }\n                          \n                          source = source + ' */\\n';\n                          \n                          switch (true) {\n                            case typeof schemaName[behavior.component] !== 'undefined':\n                              comp = behavior.component;\n                              break;\n                            case behavior.component === system._id:\n                              comp = 'system';\n                              break;\n                            default:\n                              comp = 'runtime.require(\\'' + behavior.component + '\\')';\n                              break;\n                          } \n                        \n                        source = source + comp + '.on(\\'' + behavior.state + '\\', ' + behavior.action + options;\n                        })\n                      });\n                      \n                      // START\n                      source = source + '// Start the system\\n';\n                      source = source + 'system.start();\\n';\n                                  \n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.js';\n                  }\n                  \n                  if ($('#designer-dialog-export-html').prop(\"checked\")) {\n                      js = decodeURIComponent(this.require('system-runtime.min.js').source());\n                      source = this.require('export-app.html').source();\n                      source = source\n                                  .replace(/{{library}}/g, js)\n                                  .replace(/{{library}}/g, function() {return '\\$&'})\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val())\n                                  .replace(/{{system}}/g, function(val) {return JSON.stringify(system)});\n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.html';\n                  }\n                  \n                  if ($('#designer-dialog-export-node').prop(\"checked\")) {\n                      source = decodeURIComponent(this.require('app.js').source());\n                      source = source\n                                  .replace(/{{version}}/g, this.require('designer').system().version())\n                                  .replace(/{{description}}/g, this.require('designer').system().description().replace(/\\n/g, '\\n * '))\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val())\n                                  .replace(/{{system}}/g, JSON.stringify(system));\n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.js';\n                  }\n                  \n                 if (!this.require('designer').isElectron()) {\n\n                  \ttextFileAsBlob = new Blob([textToWrite], {\n                  \t    type:'text/plain'\n                  \t});  \n                  \t\n                    if (navigator.msSaveBlob) {\n                      navigator.msSaveBlob(textFileAsBlob, fileNameToSaveAs);\n                    } else {\n\n                    \tdownloadLink = document.createElement('a');\n                    \t\n                    \tdownloadLink.download = fileNameToSaveAs;\n                    \tdownloadLink.innerHTML = 'Download File';\n                    \tif (window.webkitURL != null) {\n                    \t\tdownloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n                    \t} else {\n                    \t\tdownloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n                    \t\tdownloadLink.onclick = function (event) {\n                    \t\t    document.body.removeChild(event.target);\n                    \t\t};\n                    \t\tdownloadLink.style.display = 'none';\n                    \t\tdocument.body.appendChild(downloadLink);\n                    \t}\n                    \tdownloadLink.click();\n                    }\n                  \t\n                  \tthis.hide(); \n                 } else {\n                    this.hide(); \n                    \n                    var {dialog} = global.require(\"electron\").remote;\n                    var fs = global.require('fs');\n                    var savePath = dialog.showSaveDialog({\n                      'defaultPath': '~/' + fileNameToSaveAs\n                    });\n                    if (savePath) {\n                      fs.writeFile(savePath, textToWrite, function(err) {\n                        if (err) {\n                          message.danger('Exportation failed.');\n                        } else {\n                          message.success('Exportation is done.');\n                        }\n                      });\n                    }\n                 }\n              }\n          \t\n          } else {\n              message.warning('You have no system to export.');\n          }\n      });\n    } else {\n       message.warning('You have no system to export.');\n    }\n}"
}