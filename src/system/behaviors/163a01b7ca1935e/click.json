{
	"component": "163a01b7ca1935e",
	"state": "click",
	"action": "function click() {\n    $('#designer-toolbar-item-export').tooltip('hide');\n    var message = this.require('message');\n    var Dialog = this.require('DialogExport');\n    \n    if (this.require('designer').system()) {\n      var dialog = new Dialog({\n          'title': 'Export the current system',\n      });\n      dialog.show();\n      \n      dialog.on('ok', function () {\n          var message = this.require('message');\n          // code inspired from the blog post\n          // https://thiscouldbebetter.wordpress.com/2012/12/18/loading-editing-and-saving-a-text-file-in-html5-using-javascrip/\n          if (this.require('designer').system()) {\n              var system = null,\n              textToWrite = null,\n              textFileAsBlob = null,\n              fileNameToSaveAs = null,\n              downloadLink = null,\n              js = '';\n              source = '',\n              DialogShare = this.require('DialogShare');\n              \n              system = this.require('db').collections().System.find({\n                  '_id': this.require('designer').system().id()\n              })[0];\n              system = JSON.parse(JSON.stringify(system));\n              delete system.classInfo;\n              \n              if ($('#designer-dialog-export-url').prop(\"checked\")) {\n                  this.hide();\n  \n                  DialogShare = new DialogShare({\n                      'title': 'Copy the link to the system'\n                  });\n                  DialogShare.show();\n                  DialogShare.on('ok', function () {\n                      this.hide();\n                  });\n                  \n              } else {\n              \n                  if ($('#designer-dialog-export-json').prop(\"checked\")) {\n                      system = JSON.parse(JSON.stringify(system));\n                      \n                      if ($('#designer-dialog-export-isMaster').prop('checked')) {\n                        system.master = true;\n                      } else {\n                        system.master = false;\n                      }\n                      if ($('#designer-dialog-export-isSubsystem').prop('checked')) {\n                        system.subsystem = true;\n                      } else {\n                        system.subsystem = false;\n                      }\n                      textToWrite = JSON.stringify(system);\n                      fileNameToSaveAs = this.require('designer').system().name() + '.json';\n                  }\n                  \n                  if ($('#designer-dialog-export-javascript').prop('checked')) {\n                      source = decodeURIComponent(this.require('javascript-export.js').source());\n                      source = source\n                                  .replace(/{{version}}/g, this.require('designer').system().version())\n                                  .replace(/{{description}}/g, this.require('designer').system().description().replace(/\\n/g, '\\n * '))\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val());\n                                  \n                      // SYSTEM\n                      source = source + '// Systems\\n\\n';\n                      \n                      var confSystem = {};\n                      \n                      confSystem._id = system._id;\n                      confSystem.name = system.name;\n                      confSystem.version = system.version;\n                      confSystem.description = system.description;\n                      \n                      source = source + 'var system = runtime.system(' + JSON.stringify(confSystem, null, '\\t', 2) + ');\\n\\n';\n                      \n                      // SCHEMA / MODEL / TYPE     \n                      if (Object.keys(system.schemas).length > 0 || Object.keys(system.types).length > 0) {\n                        source = source + '// Schemas, models and types creation\\n\\n';\n                        source = source + 'var metamodel = runtime.require(\\'metamodel\\');\\n\\n';\n                      }\n                      \n                      var name = '';\n                      var models = {};\n                      for (name in system.schemas) {\n                        models[system.schemas[name]._name] = system.schemas[name]._name;\n                        source = source + 'metamodel.schema(' + JSON.stringify(system.schemas[name], null, '\\t', 2) + ');\\n\\n';\n                      }\n                      for (name in system.models) {\n                        source = source + 'metamodel.model(' + JSON.stringify(system.models[name], null, '\\t', 2) + ');\\n\\n';\n                      }\n                      for (name in system.types) {\n                        source = source + 'metamodel.type(' + JSON.stringify(system.types[name], null, '\\t', 2) + ');\\n\\n';\n                      }\n                      \n                      if (Object.keys(system.schemas).length > 0 || Object.keys(system.types).length > 0) {\n                        source = source + 'metamodel.create();\\n\\n';\n                      }\n                      \n                      // COMPONENT   \n                      if (Object.keys(system.components).length > 0) {\n                        source = source + '// Components creation\\n\\n';\n                      }\n                      \n                      var collection = '';\n                      for (collection in models) {\n                        source = source + 'var ' + collection + ' = runtime.require(\\'' + collection + '\\');\\n\\n'; \n                        for (name in system.components[collection]) {\n                          source = source + 'new ' + collection + '(' + JSON.stringify(system.components[collection][name], null, '\\t', 2) + ');\\n\\n';\n                        }\n                      }\n                      \n                      // BEHAVIOR   \n                      if (Object.keys(system.behaviors).length > 0) {\n                        source = source + '// Behaviors creation\\n\\n';\n                      }\n                      \n                      var core = false;\n                      var useCoreAPI = false;\n                      var comp = '';\n                      for (name in system.behaviors) {\n                        useCoreAPI = typeof system.behaviors[name].useCoreAPI !== 'undefined' ? system.behaviors[name].useCoreAPI : false;\n                        core = typeof system.behaviors[name].core !== 'undefined' ? system.behaviors[name].core : false;\n                      \n                        switch (true) {\n                          case typeof models[system.behaviors[name].component] !== 'undefined':\n                            comp = system.behaviors[name].component;\n                            break;\n                          case system.behaviors[name].component === system._id:\n                            comp = 'system';\n                            break;\n                          default:\n                            comp = 'runtime.require(\\'' + system.behaviors[name].component + '\\')';\n                            break;\n                        } \n                      \n                        source = source + comp + '.on(\\'' + system.behaviors[name].state + '\\', ' + system.behaviors[name].action + ', ' + useCoreAPI +', ' + core + ');\\n\\n';\n                      }\n                      \n                      // START\n                      source = source + '// Start the system;\\n';\n                      source = source + 'system.start();\\n';\n                                  \n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.js';\n                  }\n                  \n                  if ($('#designer-dialog-export-html').prop(\"checked\")) {\n                      js = decodeURIComponent(this.require('system-runtime.min.js').source());\n                      source = this.require('export-app.html').source();\n                      source = source\n                                  .replace(/{{library}}/g, js)\n                                  .replace(/{{library}}/g, function() {return '\\$&'})\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val())\n                                  .replace(/{{system}}/g, function(val) {return JSON.stringify(system)});\n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.html';\n                  }\n                  \n                  if ($('#designer-dialog-export-node').prop(\"checked\")) {\n                      source = decodeURIComponent(this.require('app.js').source());\n                      source = source\n                                  .replace(/{{version}}/g, this.require('designer').system().version())\n                                  .replace(/{{description}}/g, this.require('designer').system().description().replace(/\\n/g, '\\n * '))\n                                  .replace(/{{name}}/g, this.require('designer').system().name())\n                                  .replace(/{{logLevel}}/g, $('#designer-dialog-export-options-log-level-select').val())\n                                  .replace(/{{system}}/g, JSON.stringify(system));\n                      textToWrite = source;\n                      fileNameToSaveAs = this.require('designer').system().name() + '.js';\n                  }\n                  \n                 if (!this.require('designer').isElectron()) {\n\n                  \ttextFileAsBlob = new Blob([textToWrite], {\n                  \t    type:'text/plain'\n                  \t});  \n                  \t\n                    if (navigator.msSaveBlob) {\n                      navigator.msSaveBlob(textFileAsBlob, fileNameToSaveAs);\n                    } else {\n\n                    \tdownloadLink = document.createElement('a');\n                    \t\n                    \tdownloadLink.download = fileNameToSaveAs;\n                    \tdownloadLink.innerHTML = 'Download File';\n                    \tif (window.webkitURL != null) {\n                    \t\tdownloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n                    \t} else {\n                    \t\tdownloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n                    \t\tdownloadLink.onclick = function (event) {\n                    \t\t    document.body.removeChild(event.target);\n                    \t\t};\n                    \t\tdownloadLink.style.display = 'none';\n                    \t\tdocument.body.appendChild(downloadLink);\n                    \t}\n                    \tdownloadLink.click();\n                    }\n                  \t\n                  \tthis.hide(); \n                 } else {\n                    this.hide(); \n                    \n                    var {dialog} = global.require(\"electron\").remote;\n                    var fs = global.require('fs');\n                    var savePath = dialog.showSaveDialog({\n                      'defaultPath': '~/' + fileNameToSaveAs\n                    });\n                    if (savePath) {\n                      fs.writeFile(savePath, textToWrite, function(err) {\n                        if (err) {\n                          message.danger('Exportation failed.');\n                        } else {\n                          message.success('Exportation is done.');\n                        }\n                      });\n                    }\n                 }\n              }\n          \t\n          } else {\n              message.warning('You have no system to export.');\n          }\n      });\n    } else {\n       message.warning('You have no system to export.');\n    }\n}"
}