{
  "name": "class-system-factory",
  "master": false,
  "subsystem": false,
  "version": "1.0.0",
  "description": "System factory",
  "schemas": {
    "l1ea0910f981a5f3": {
      "_id": "l1ea0910f981a5f3",
      "_name": "SystemFactory",
      "_inherit": ["_Component"],
      "system": "property",
      "syncModel": "method",
      "syncBehavior": "method",
      "syncComponent": "method",
      "createModel": "method",
      "createBehavior": "method",
      "deleteSchema": "method",
      "generateId": "method",
      "getGeneratedSchema": "method",
      "getGeneratedModel": "method",
      "mergeBehavior": "method",
      "mergeSystem": "method"
    }
  },
  "models": {
    "h1ac4f1c0511caa0": {
      "_id": "h1ac4f1c0511caa0",
      "_name": "SystemFactory",
      "system": {
        "type": "@System",
        "readOnly": false,
        "mandatory": false,
        "default": ""
      },
      "syncModel": {
        "params": [{
          "name": "schema",
          "type": "object",
          "mandatory": false,
          "default": {}
        }]
      },
      "syncBehavior": {
        "params": [{
          "name": "model",
          "type": "object",
          "mandatory": false,
          "default": {}
        }]
      },
      "syncComponent": {
        "params": [{
          "name": "model",
          "type": "object",
          "mandatory": false,
          "default": {}
        }, {
          "name": "forceDelete",
          "type": "boolean",
          "mandatory": false,
          "default": true
        }]
      },
      "createModel": {
        "params": [{
          "name": "schema",
          "type": "object",
          "mandatory": false,
          "default": {}
        }]
      },
      "createBehavior": {
        "params": [{
          "name": "type",
          "type": "string",
          "mandatory": false,
          "default": "method"
        }, {
          "name": "model",
          "type": "string",
          "mandatory": false,
          "default": ""
        }, {
          "name": "state",
          "type": "string",
          "mandatory": false,
          "default": ""
        }, {
          "name": "def",
          "type": "object",
          "mandatory": false,
          "default": {}
        }]
      },
      "deleteSchema": {
        "params": [{
          "name": "schemaId",
          "type": "string",
          "mandatory": false,
          "default": ""
        }]
      },
      "generateId": {
        "result": "string"
      },
      "getGeneratedSchema": {
        "params": [{
          "name": "schema",
          "type": "string",
          "mandatory": true,
          "default": ""
        }],
        "result": "object"
      },
      "getGeneratedModel": {
        "params": [{
          "name": "model",
          "type": "string",
          "mandatory": true,
          "default": ""
        }],
        "result": "object"
      },
      "mergeBehavior": {
        "params": [{
          "name": "behaviors",
          "type": "object",
          "mandatory": true,
          "default": {}
        }, {
          "name": "behavior",
          "type": "object",
          "mandatory": true,
          "default": {}
        }, {
          "name": "sysId",
          "type": "string",
          "mandatory": true,
          "default": ""
        }, {
          "name": "systemName",
          "type": "string",
          "mandatory": true,
          "default": ""
        }]
      },
      "mergeSystem": {
        "params": [{
          "name": "sys",
          "type": "any",
          "mandatory": false,
          "default": null
        }]
      }
    }
  },
  "behaviors": {
    "d1a56d197331e510": {
      "_id": "d1a56d197331e510",
      "component": "SystemFactory",
      "state": "mergeBehavior",
      "action": "function mergeBehavior(behaviors, behavior, sysId, systemName) { \n\tvar that = this,\n\t    source = {},\n\t    lastA = -1,\n\t    firstB = -1,\n\t    lastB = -1,\n\t    toAdd = '';\n\t    \n\tfunction _getBehavior() {\n\t  var result = null,\n\t      id = '';\n\t      \n\t  for (id in behaviors) {\n\t    if (behaviors[id].state === behavior.state && behaviors[id].component === sysId) {\n\t      result = behaviors[id];\n\t      break;\n\t    }\n\t  }\n\t  \n\t  if (!result) {\n\t    result = {\n\t      \"_id\": that.require('designer').generateId(),\n\t      \"component\": sysId,\n\t      \"state\": behavior.state,\n\t      \"action\": \"function \" + behavior.state + \"() { \\n\\t\\n}\",\n\t    };\n\t  }\n\t  \n\t  return result;\n\t}  \n\t\n\tsource = _getBehavior();\n\t    \n\tlastA = source.action.lastIndexOf('}');\n\tfirstB = behavior.action.indexOf('{');\n\tlastB = behavior.action.lastIndexOf('}');\n\t\n\ttoAdd = behavior.action.substring(firstB + 1, lastB);\n\t\n\tif (toAdd.trim() !== '') { \n\t  toAdd = '\\n  // from system ' + systemName + '\\n' + toAdd + '\\n}';\n\t} else {\n\t  toAdd = '}';\n\t}\n\t\n\tsource.action = source.action.substring(0, lastA) + toAdd;\n\t\n\tbehaviors[source._id] =  source;\n}",
      "useCoreAPI": false,
      "core": false
    },
    "r177551fafb195af": {
      "_id": "r177551fafb195af",
      "component": "SystemFactory",
      "state": "getGeneratedSchema",
      "action": "function getGeneratedSchema(schema) { \n  var schemaDef = null,\n      result = {},\n      i = 0,\n      length = 0,\n      propName = '';\n\n  function _getSchemaDef(name, schemas) {\n      var result = '',\n          id = '';\n\n      for (id in schemas) {\n          if (schemas[id]._name === name) {\n              result = schemas[id];\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _searchParents(parents, states, schemas) {\n      var parent = '',\n          schemaDef = null,\n          i = 0,\n          length = 0;\n\n      length = parents.length;\n      for (i = 0; i < length; i++) {\n          parent = parents[i];\n          if (parent === '_Component') {\n              result.init = 'init';\n              result.destroy = 'destroy';\n              result.error = 'error';\n          } else {\n              schemaDef = _getSchemaDef(parent, schemas);\n\n              for (propName in schemaDef) {\n                  if (propName.indexOf('_') !== 0) {\n                      result[propName] = schemaDef[propName];\n                  }\n              }\n\n              if (schemaDef._inherit) {\n                  _searchParents(schemaDef._inherit, result, schemas);\n              }\n          }\n      }\n  }\n\n  schemaDef = _getSchemaDef(schema, this.system().schemas());\n\n  for (propName in schemaDef) {\n      if (propName.indexOf('_') !== 0) {\n          result[propName] = schemaDef[propName];\n      }\n  }\n\n  if (schemaDef._inherit) {\n      _searchParents(schemaDef._inherit, result, this.system().schemas());\n  }\n\n  return result;\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z13a3b1308218a5d": {
      "_id": "z13a3b1308218a5d",
      "component": "SystemFactory",
      "state": "getGeneratedModel",
      "action": "function getGeneratedModel(model) { \n  var modelDef = null,\n      result = {},\n      i = 0,\n      length = 0,\n      propName = '';\n\n  function _getInherit(name, schemas) {\n      var result = '',\n          id = '';\n\n      for (id in schemas) {\n          if (schemas[id]._name === name) {\n              result = schemas[id]._inherit;\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _getModelDef(name, models) {\n      var result = '',\n          id = '';\n\n      for (id in models) {\n          if (models[id]._name === name) {\n              result = models[id];\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _searchParents(parents, states, models, schemas) {\n      var parent = '',\n          modelDef = null,\n          i = 0,\n          length = 0;\n\n      length = parents.length;\n      for (i = 0; i < length; i++) {\n          parent = parents[i];\n          if (parent === '_Component') {\n              result.init = {\n                  \"params\": [{\n                      \"name\": \"conf\",\n                      \"type\": \"object\"\n                  }]\n              };\n\n              result.destroy = {\n                  \"params\": []\n              };\n\n              result.error = {\n                  \"params\": [{\n                      \"name\": \"data\",\n                      \"type\": \"errorParam\"\n                  }]\n              };\n\n          } else {\n              modelDef = _getModelDef(parent, models);\n\n              for (propName in modelDef) {\n                  if (propName.indexOf('_') !== 0 && typeof result[propName] === 'undefined') {\n                      result[propName] = modelDef[propName];\n                  }\n              }\n\n              if (_getInherit(parent, schemas)) {\n                  _searchParents(_getInherit(parent, schemas), result, models, schemas);\n              }\n          }\n      }\n  }\n\n  modelDef = _getModelDef(model, this.system().models());\n\n  for (propName in modelDef) {\n      if (propName.indexOf('_') !== 0) {\n          result[propName] = modelDef[propName];\n      }\n  }\n\n  if (_getInherit(model, this.system().schemas())) {\n      _searchParents(_getInherit(model, this.system().schemas()), result, this.system().models(), this.system().schemas());\n  }\n\n  return result;\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z13676132a318174": {
      "_id": "z13676132a318174",
      "component": "SystemFactory",
      "state": "generateId",
      "action": "function generateId() {\n  function gen() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16);\n  }\n  function getPrefix() {\n      var validPrefix = 'abcdefghijklmnopqrstuvwxyz';\n      return validPrefix.charAt(Math.floor(Math.random() * validPrefix.length));\n  }\n  \n  return getPrefix() + gen() + gen() + gen();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "f14ed91a7d21b111": {
      "_id": "f14ed91a7d21b111",
      "component": "SystemFactory",
      "state": "syncBehavior",
      "action": "function syncBehavior(model) { \n  var behaviors = this.system().behaviors(),\n    schema = null,\n    propName = '',\n    params = '',\n    header = '',\n    def = null,\n    methodDef = null,\n    length = 0,\n    i = 0,\n    behaviorId = '',\n    action = '',\n    behavior = null,\n    that = this;\n\n  function _getSchema(name) {\n    var result = '',\n      id = '';\n\n    for (id in that.system().schemas()) {\n      if (that.system().schemas()[id]._name === name) {\n        result = that.system().schemas()[id];\n        break;\n      }\n    }\n    return result;\n  }\n\n  schema = _getSchema(model._name);\n\n  for (propName in schema) {\n    switch (true) {\n      case schema[propName] === 'method':\n      case schema[propName] === 'event':\n        // params\n        def = model[propName];\n\n        if (typeof model[propName] !== 'object') {\n          if (schema[propName] === 'method') {\n            def = {\n              \"params\": [\n                {\n                  \"name\": \"param\",\n                  \"type\": \"string\",\n                  \"mandatory\": false,\n                  \"default\": \"\"\n                }\n              ],\n              \"result\": \"string\"\n            };\n          } else {\n            def = {\n              \"params\": [\n                {\n                  \"name\": \"param\",\n                  \"type\": \"string\",\n                  \"mandatory\": false,\n                  \"default\": \"\"\n                }\n              ]\n            };\n          }\n        }\n        methodDef = def.params;\n        params = '';\n        if (methodDef && methodDef.length) {\n          length = methodDef.length;\n          for (i = 0; i < length; i++) {\n            if (i === 0) {\n              params = methodDef[i].name;\n            } else {\n              params = params + ', ' + methodDef[i].name;\n            }\n          }\n        }\n\n        header = 'function ' + propName + '(' + params + ') ';\n\n        for (behaviorId in behaviors) {\n          behavior = behaviors[behaviorId];\n          if (behavior.component === model._name && behavior.state === propName) {\n            action = behavior.action.split('{');\n            action[0] = header;\n            behaviors[behaviorId].action = action.join('{');\n            this.system().behaviors(behaviors);\n            this.require('channel').$designerUpdateBehavior(behavior._id, behavior);\n            this.require('designer').save();\n          }\n        }\n\n        break;\n      default:\n        break;\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "y17ae11cbc214f76": {
      "_id": "y17ae11cbc214f76",
      "component": "SystemFactory",
      "state": "syncModel",
      "action": "function syncModel(schema) { \n  var schemas = this.system().schemas(),\n      models = this.system().models(),\n      components = this.system().components(),\n      behaviors = this.system().behaviors(),\n      name = '',\n      id = '',\n      propName = '',\n      component = null,\n      behavior = null,\n      model = null,\n      oldSchema = null,\n      createModel = false;\n\n  name = schema._name;\n\n  // search\n  for (id in models) {\n    if (models[id]._name === schema._name) {\n      model = models[id];\n    }\n  }\n\n  // case of no model\n  if (!model) {\n    createModel = true;\n    model = {\n      \"_id\": this.generateId(),\n      \"_name\": name\n    };\n  }\n\n  // previous schema\n  oldSchema = schemas[schema._id];\n  for (propName in schema) {\n    if ((schema.hasOwnProperty(propName) &&\n        oldSchema &&\n        (typeof oldSchema[propName] === 'undefined' ||\n            oldSchema[propName] !== schema[propName])) ||\n        createModel\n    ) {\n        switch (true) {\n          case schema[propName] === 'property':\n            model[propName] = {\n              \"type\": \"any\",\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": \"\"\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case schema[propName] === 'link':\n            model[propName] = {\n              \"type\": \"@_Component\",\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": \"\"\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case schema[propName] === 'method':\n            if (typeof model[propName] === 'undefined' || (typeof model[propName] !== 'undefined' && typeof model[propName].type !== 'undefined')) {\n              model[propName] = {\n                  \"params\": [{\n                        \"name\": \"param\",\n                        \"type\": \"any\",\n                        \"mandatory\": false,\n                        \"default\": null\n                      }],\n                  \"result\": \"any\"\n              };\n\n              // create behavior\n              this.createBehavior('method', model._name, propName, model[propName]);\n            }\n\n            break;\n          case schema[propName] === 'event':\n            if (typeof model[propName] === 'undefined' || (typeof model[propName] !== 'undefined' && typeof model[propName].type !== 'undefined')) {\n              model[propName] = {\n                \"params\": [{\n                    \"name\": \"param\",\n                    \"type\": \"any\",\n                    \"mandatory\": false,\n                    \"default\": null\n                }]\n              };\n\n              // create behavior\n              this.createBehavior('event', model._name, propName, model[propName]);\n            } else {\n              if (typeof model[propName].result !== 'undefined') {\n                delete model[propName].result;\n              }\n            }\n\n            break;\n          case schema[propName] === 'collection':\n            model[propName] = {\n              \"type\": [\"@_Component\"],\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": []\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case propName.indexOf('_') !== 1:\n            if (propName !== '_id' && propName !== '_inherit') {\n              model[propName] = schema[propName];\n            }\n            break;\n          default:\n            break;\n        }\n    }\n  }\n\n  if (oldSchema) {\n    for (propName in oldSchema) {\n      if (propName.indexOf('_') !== 0 && typeof schema[propName] === 'undefined') {\n        delete model[propName];\n\n        for (component in components[name]) {\n          delete components[name][component][propName];\n          this.require('channel').$designerDeleteComponent(component, name);\n          this.system().components(components);\n        }\n        for (behavior in behaviors) {\n          if (model && behaviors[behavior].component === model._name && behaviors[behavior].state === propName) {\n            delete behaviors[behavior];\n            this.require('channel').$designerDeleteBehavior(behavior);\n            this.system().behaviors(behaviors);\n          }\n        }\n      }\n    }\n  }\n\n  models[model._id] = model;\n  this.system().models(models);\n  this.require('channel').$designerUpdateModel(model._id, model);\n  \n  this.require('designer').save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z16b03119e81c817": {
      "_id": "z16b03119e81c817",
      "component": "SystemFactory",
      "state": "syncComponent",
      "action": "function syncComponent(model, forceDelete) { \n  var components = this.system().components(),\n      name = '',\n      componentId = '',\n      propName = '',\n      modelDef = null,\n      component = null,\n      createModel = false;\n\n  name = model._name;\n\n  schema = this.getGeneratedSchema(name);\n  modelDef = this.getGeneratedModel(name);\n\n  for (propName in schema) {\n    switch (true) {\n      case schema[propName] === 'property':\n          for (component in components[name]) {\n            if (typeof components[name][component][propName] === 'undefined') {\n              components[name][component][propName] = modelDef[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n          }\n          break;\n      case schema[propName] === 'link':\n          for (component in components[name]) {\n            if (typeof components[name][component][propName] === 'undefined') {\n              components[name][component][propName] = modelDef[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n          }\n          break;\n      case schema[propName] === 'collection':\n        for (component in components[name]) {\n          if (typeof components[name][component][propName] === 'undefined') {\n            components[name][component][propName] = modelDef[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n            this.system().components(components);\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (forceDelete) {\n    for (componentId in components[name]) {\n      for (propName in components[name][componentId]) {\n        if (typeof modelDef[propName] === 'undefined' && propName.indexOf('_') !== 0) {\n          delete components[name][componentId][propName];\n          this.require('channel').$designerDeleteComponent(componentId, name);\n          this.system().components(components);\n        }\n      }\n    }\n  }\n\n  this.require('designer').save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "f17e231c64613693": {
      "_id": "f17e231c64613693",
      "component": "SystemFactory",
      "state": "createModel",
      "action": "function createModel(schema) { \n  var schemas = this.system().schemas(),\n      models = this.system().models(),\n      components = this.system().components(),\n      name = '',\n      id = '',\n      propName = '',\n      component = null,\n      behavior = null,\n      model = null,\n      oldSchema = null;\n\n  id = this.generateId();\n\n  model = {\n    \"_id\": id,\n    \"_name\": schema._name\n  };\n\n  for (propName in schema) {\n    if (propName.indexOf('_') !== 0) {\n      switch (true) {\n        case schema[propName] === 'property':\n          model[propName] = {\n            \"type\": \"any\",\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": \"\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'link':\n          model[propName] = {\n            \"type\": \"@_Component\",\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": \"\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'method':\n          model[propName] = {\n            \"params\": [{\n                \"name\": \"param\",\n                \"type\": \"any\",\n                \"mandatory\": false,\n                \"default\": null\n              }],\n            \"result\": \"any\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'event':\n          model[propName] = {\n            \"params\": [{\n              \"name\": \"param\",\n              \"type\": \"any\",\n              \"mandatory\": false,\n              \"default\": null\n            }]\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'collection':\n          model[propName] = {\n            \"type\": [\"any\"],\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": []\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  models[id] = model;\n\n  this.system().models(models);\n  this.require('channel').$designerCreateModel(model._id, model);\n  this.system().components(components);\n  \n  this.require('designer').save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z1168215afe1773c": {
      "_id": "z1168215afe1773c",
      "component": "SystemFactory",
      "state": "deleteSchema",
      "action": "function deleteSchema(schemaId) {\n  var behaviorId = '',\n    modelId = '',\n    behavior = null,\n    schemas = this.system().schemas(),\n    models = this.system().models(),\n    behaviors = this.system().behaviors(),\n    components = this.system().components(),\n    schemaName = schemas[schemaId]._name;\n\n  function _getModelId(name, models) {\n    var result = '',\n      id = '';\n\n    for (id in models) {\n      if (models[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  // components\n  delete components[schemaName];\n  this.system().components(components);\n\n  // behaviors\n  for (behaviorId in behaviors) {\n    behavior = behaviors[behaviorId];\n    if (behavior.component === schemaName) {\n      delete behaviors[behaviorId];\n      this.system().behaviors(behaviors);\n    }\n  }\n\n  // model\n  modelId = _getModelId(schemas[schemaId]._name, models);\n  if (modelId) {\n    delete models[modelId];\n    this.system().models(models);\n  }\n\n  // schema\n  delete schemas[schemaId];\n  this.system().schemas(schemas);\n}",
      "useCoreAPI": false,
      "core": false
    },
    "v1bc5010b18187ff": {
      "_id": "v1bc5010b18187ff",
      "component": "SystemFactory",
      "state": "createBehavior",
      "action": "function createBehavior(type, model, state, def) { \n  var body = '\\t\\n',\n      behaviors = this.system().behaviors();\n\n  function _canCreate(type, component, state, behaviors) {\n    var behavior = {},\n        id = '',\n        exist = false,\n        result = true;\n\n    for (id in behaviors) {\n      behavior = behaviors[id];\n      if (behavior.component === component && behavior.state === state) {\n        exist = true;\n        break;\n      }\n    }\n    if (exist) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  if (_canCreate(type, model, state, behaviors)) {\n    uuid = this.generateId();\n\n    // params\n    methodDef = def.params;\n    if (methodDef && methodDef.length) {\n      length = methodDef.length;\n      for (i = 0; i < length; i++) {\n        if (i === 0) {\n          params = methodDef[i].name;\n        } else {\n          params = params + ', ' + methodDef[i].name;\n        }\n      }\n    }\n\n    // body\n    result = def.result;\n    if (result) {\n      switch (result) {\n        case 'string':\n          body = \"\\tvar result = '';\\n\\treturn result;\\n\";\n          break;\n        case 'array':\n          body = \"\\tvar result = [];\\n\\treturn result;\\n\";\n          break;\n        case 'number':\n          body = \"\\tvar result = 0;\\n\\treturn result;\\n\";\n          break;\n        case 'object':\n          body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n          break;\n        default:\n          body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n          break;\n      }\n    }\n\n    // set behavior\n    behavior = {\n      \"_id\": uuid,\n      \"component\": model,\n      \"state\": state,\n      \"action\": \"function \" + state + \"(\" + params + \") { \\n\" + body + \"}\",\n      \"useCoreAPI\": false,\n      \"core\": false\n    };\n\n    behaviors[uuid] = behavior;\n\n    this.system().behaviors(behaviors);\n    this.require('designer').save();\n\n    this.require('channel').$designerCreateBehavior(behavior);\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "c1b62f1086818a0f": {
      "_id": "c1b62f1086818a0f",
      "component": "SystemFactory",
      "state": "mergeSystem",
      "action": "function mergeSystem(sys) { \n  var System = this.require('System'),\n    name = '',\n    propName = '',\n    modelName = '',\n    compId = '',\n    modelId = '',\n    schemaId = '',\n    designer = this.require('designer'),\n    factory = this.require('factory'),\n    schemas = {},\n    models = {},\n    types = {},\n    components = {},\n    behaviors = {},\n    system = this.system(),\n    message = this.require('message');\n\n  function _getModelId(name) {\n    var result = '',\n      id = '';\n\n    for (id in factory.system().models()) {\n      if (factory.system().models()[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getSchemaId(name) {\n    var result = '',\n      id = '';\n\n    for (id in factory.system().schemas()) {\n      if (factory.system().schemas()[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _canOverrideBehavior(id, component, state, behaviors) {\n    var behavior = {},\n      behaviorId = '';\n\n    for (behaviorId in behaviors) {\n      behavior = behaviors[behaviorId];\n      if (behavior.component === component && behavior.state === state && behavior._id !== id) {\n        delete behaviors[behavior._id];\n        break;\n      }\n    }\n  }\n\n  function _canOverride(sysId, schemas, behaviors, behavior) {\n    var def = {},\n      id = '',\n      result = true;\n\n    id = _getSchemaId(behavior.component);\n    def = schemas[id];\n\n    if (def && def[behavior.state]) {\n      if (def[behavior.state] === 'method') {\n        _canOverrideBehavior(behavior._id, behavior.component, behavior.state, behaviors);\n      }\n    } else {\n      result = false;\n    }\n\n    if ((behavior.state === 'main' || behavior.state === 'start' || behavior.state === 'stop') && behavior.component === sysId) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  if (Object.keys(sys).length) {\n\n    // schemas\n    schemas = JSON.parse(JSON.stringify(this.require('factory').system().schemas()));\n    for (name in sys.schemas) {\n      if (schemas[name]) {\n        for (propName in sys.schemas[name]) {\n          schemas[name][propName] = sys.schemas[name][propName];\n        }\n      } else {\n        if (!_getSchemaId(sys.schemas[name]._name)) {\n          schemas[name] = sys.schemas[name];\n        } else {\n          for (propName in sys.schemas[name]) {\n            if (propName.indexOf('_') !== 0) {\n              schemas[_getSchemaId(sys.schemas[name]._name)][propName] = sys.schemas[name][propName];\n            }\n          }\n        }\n      }\n    }\n    this.require('factory').system().schemas(schemas);\n\n    // behaviors\n    behaviors = JSON.parse(JSON.stringify(this.require('factory').system().behaviors()));\n    for (name in sys.behaviors) {\n      if (name !== sys._id && _canOverride(sys._id, schemas, behaviors, sys.behaviors[name])) {\n        behaviors[name] = sys.behaviors[name];\n      } else {\n        // merge main / start / stop\n        if ((sys.behaviors[name].state === 'main' || sys.behaviors[name].state === 'start' || sys.behaviors[name].state === 'stop') && sys.behaviors[name].component === sys._id) {\n          this.require('factory').mergeBehavior(behaviors, sys.behaviors[name], this.require('factory').system().id(), sys.name);\n        }\n      }\n    }\n    this.require('factory').system().behaviors(behaviors);\n\n    // sync models\n    for (schemaId in schemas) {\n      this.require('factory').syncModel(schemas[schemaId]);\n    }\n\n    // models\n    models = JSON.parse(JSON.stringify(this.require('factory').system().models()));\n    for (name in sys.models) {\n      if (models[name]) {\n        for (propName in sys.models[name]) {\n          models[name][propName] = sys.models[name][propName];\n        }\n      } else {\n        if (!_getModelId(sys.models[name]._name)) {\n          models[name] = sys.models[name];\n        } else {\n          for (propName in sys.models[name]) {\n            if (propName.indexOf('_') !== 0) {\n              models[_getModelId(sys.models[name]._name)][propName] = sys.models[name][propName];\n            }\n          }\n        }\n      }\n    }\n    this.require('factory').system().models(models);\n\n    // sync behaviors and components\n    for (modelId in models) {\n      this.require('factory').syncBehavior(models[modelId]);\n    }\n\n    // types\n    types = JSON.parse(JSON.stringify(this.require('factory').system().types()));\n    for (name in sys.types) {\n      if (types[name]) {\n        for (propName in sys.types[name]) {\n          types[name][propName] = sys.types[name][propName];\n        }\n      } else {\n        types[name] = sys.types[name];\n      }\n    }\n    this.require('factory').system().types(types);\n\n    // components\n    components = JSON.parse(JSON.stringify(this.require('factory').system().components()));\n    for (modelName in sys.components) {\n      if (!components[modelName]) {\n        components[modelName] = {};\n      }\n      for (compId in sys.components[modelName]) {\n        if (components[modelName][compId]) {\n          for (propName in sys.components[modelName][compId]) {\n            components[modelName][compId][propName] = sys.components[modelName][compId][propName];\n          }\n        } else {\n          components[modelName][compId] = sys.components[modelName][compId];\n        }\n      }\n    }\n    this.require('factory').system().components(components);\n\n    // sync components\n    for (modelId in models) {\n      this.require('factory').syncComponent(models[modelId]);\n    }\n\n    this.require('factory').system().schemas(schemas);\n    this.require('factory').system().models(models);\n    this.require('factory').system().types(types);\n    this.require('factory').system().behaviors(behaviors);\n    this.require('factory').system().components(components);\n\n    if (this.require('factory').system().id() === sys._id) {\n      this.require('factory').system().version(sys.version);\n      this.require('factory').system().description(sys.description);\n    }\n\n    message.success('Composition of the system is done.');\n  } else {\n    if (this.require('factory').system()) {\n      message.danger('The system you try to import is invalid.');\n    } else {\n      message.danger('There is no system to compose with.');\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    }
  },
  "types": {},
  "components": {
    "SystemFactory": {
      "factory": {
        "_id": "factory",
        "system": ""
      }
    }
  },
  "_id": "b1a876118c8137a2"
}
