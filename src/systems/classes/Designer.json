{
    "name": "class-designer",
    "master": false,
    "subsystem": false,
    "version": "1.0.0",
    "description": "",
    "schemas": {
        "o1ead8184af1a83e": {
            "_name": "Designer",
            "_inherit": [
                "_Component"
            ],
            "version": "property",
            "context": "property",
            "oldContext": "property",
            "space": "property",
            "system": "property",
            "filter": "property",
            "type": "property",
            "runWindow": "property",
            "debugWindow": "property",
            "updateRouter": "method",
            "syncModel": "method",
            "syncBehavior": "method",
            "syncComponent": "method",
            "createModel": "method",
            "createBehavior": "method",
            "deleteSchema": "method",
            "linkModel": "method",
            "save": "method",
            "saveCordova": "method",
            "saveAs": "method",
            "welcome": "method",
            "generateId": "method",
            "open": "method",
            "render": "event",
            "logs": "collection",
            "isCordova": "method",
            "isElectron": "method",
            "updateCordovaContext": "method",
            "runMessages": "method",
            "getGeneratedSchema": "method",
            "getGeneratedModel": "method",
            "mergeBehavior": "method",
            "_id": "o1ead8184af1a83e"
        }
    },
    "models": {
        "q129be1c61b18285": {
            "_name": "Designer",
            "version": {
                "type": "string",
                "readOnly": false,
                "mandatory": false,
                "default": "2.0.0-alpha.1"
            },
            "system": {
                "type": "@System",
                "readOnly": false,
                "mandatory": false,
                "default": {}
            },
            "oldContext": {
                "type": "string",
                "readOnly": false,
                "mandatory": false,
                "default": ""
            },
            "context": {
                "type": "string",
                "readOnly": false,
                "mandatory": false,
                "default": ""
            },
            "space": {
                "type": "string",
                "readOnly": false,
                "mandatory": false,
                "default": ""
            },
            "filter": {
                "type": "string",
                "readOnly": false,
                "mandatory": false,
                "default": ""
            },
            "type": {
                "type": "editorType",
                "readOnly": false,
                "mandatory": false,
                "default": "designer"
            },
            "runWindow": {
                "type": "object",
                "readOnly": false,
                "mandatory": false,
                "default": null
            },
            "debugWindow": {
                "type": "object",
                "readOnly": false,
                "mandatory": false,
                "default": null
            },
            "updateRouter": {},
            "syncModel": {
                "params": [{
                    "name": "schema",
                    "type": "object",
                    "mandatory": false,
                    "default": {}
                }]
            },
            "syncBehavior": {
                "params": [{
                    "name": "model",
                    "type": "object",
                    "mandatory": false,
                    "default": {}
                }]
            },
            "syncComponent": {
                "params": [{
                        "name": "model",
                        "type": "object",
                        "mandatory": false,
                        "default": {}
                    },
                    {
                        "name": "forceDelete",
                        "type": "boolean",
                        "mandatory": false,
                        "default": true
                    }
                ]
            },
            "createModel": {
                "params": [{
                    "name": "schema",
                    "type": "object",
                    "mandatory": false,
                    "default": {}
                }]
            },
            "createBehavior": {
                "params": [{
                        "name": "type",
                        "type": "string",
                        "mandatory": false,
                        "default": "method"
                    },
                    {
                        "name": "model",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    },
                    {
                        "name": "state",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    },
                    {
                        "name": "def",
                        "type": "object",
                        "mandatory": false,
                        "default": {}
                    }
                ]
            },
            "deleteSchema": {
                "params": [{
                    "name": "schemaId",
                    "type": "string",
                    "mandatory": false,
                    "default": ""
                }]
            },
            "linkModel": {
                "params": [{
                        "name": "source",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    }
                ]
            },
            "logs": {
                "type": [
                    "@Log"
                ],
                "readOnly": false,
                "mandatory": false,
                "default": []
            },
            "save": {},
            "saveCordova": {},
            "welcome": {},
            "generateId": {
                "result": "string"
            },
            "render": {},
            "open": {
                "params": [{
                        "name": "url",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    },
                    {
                        "name": "isExt",
                        "type": "boolean",
                        "mandatory": false,
                        "default": false
                    }
                ]
            },
            "saveAs": {
                "params": [{
                        "name": "data",
                        "type": "object",
                        "mandatory": false,
                        "default": {}
                    },
                    {
                        "name": "fileName",
                        "type": "string",
                        "mandatory": false,
                        "default": ""
                    }
                ]
            },
            "isCordova": {
                "result": "boolean"
            },
            "isElectron": {
                "result": "boolean"
            },
            "runMessages": {
                "params": [{
                    "name": "messages",
                    "type": "array",
                    "mandatory": true,
                    "default": []
                }]
            },
            "updateCordovaContext": {},
            "getGeneratedSchema": {
                "params": [{
                    "name": "schema",
                    "type": "string",
                    "mandatory": true,
                    "default": ""
                }],
                "result": "object"
            },
            "getGeneratedModel": {
                "params": [{
                    "name": "model",
                    "type": "string",
                    "mandatory": true,
                    "default": ""
                }],
                "result": "object"
            },
            "mergeBehavior": {
                "params": [{
                        "name": "behaviors",
                        "type": "object",
                        "mandatory": true,
                        "default": {}
                    },
                    {
                        "name": "behavior",
                        "type": "object",
                        "mandatory": true,
                        "default": {}
                    },
                    {
                        "name": "sysId",
                        "type": "string",
                        "mandatory": true,
                        "default": ""
                    },
                    {
                        "name": "systemName",
                        "type": "string",
                        "mandatory": true,
                        "default": ""
                    }
                ]
            },
            "_id": "q129be1c61b18285"
        }
    },
    "behaviors": {
        "f17a251c67d1e68c": {
            "_id": "f17a251c67d1e68c",
            "component": "Designer",
            "state": "generateId",
            "action": "function generateId() {\n    function gen() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16);\n    }\n    function getPrefix() {\n        var validPrefix = 'abcdefghijklmnopqrstuvwxyz';\n        return validPrefix.charAt(Math.floor(Math.random() * validPrefix.length));\n    }\n    \n    return getPrefix() + gen() + gen() + gen();\n}"
        },
        "k11c6214b2d14570": {
            "_id": "k11c6214b2d14570",
            "component": "Designer",
            "state": "getGeneratedModel",
            "action": "function getGeneratedModel(model) { \n  var modelDef = null,\n      result = {},\n      i = 0,\n      length = 0,\n      propName = '';\n\n  function _getInherit(name, schemas) {\n      var result = '',\n          id = '';\n\n      for (id in schemas) {\n          if (schemas[id]._name === name) {\n              result = schemas[id]._inherit;\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _getModelDef(name, models) {\n      var result = '',\n          id = '';\n\n      for (id in models) {\n          if (models[id]._name === name) {\n              result = models[id];\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _searchParents(parents, states, models, schemas) {\n      var parent = '',\n          modelDef = null,\n          i = 0,\n          length = 0;\n\n      length = parents.length;\n      for (i = 0; i < length; i++) {\n          parent = parents[i];\n          if (parent === '_Component') {\n              result.init = {\n                  \"params\": [{\n                      \"name\": \"conf\",\n                      \"type\": \"object\"\n                  }]\n              };\n\n              result.destroy = {\n                  \"params\": []\n              };\n\n              result.error = {\n                  \"params\": [{\n                      \"name\": \"data\",\n                      \"type\": \"errorParam\"\n                  }]\n              };\n\n          } else {\n              modelDef = _getModelDef(parent, models);\n\n              for (propName in modelDef) {\n                  if (propName.indexOf('_') !== 0 && typeof result[propName] === 'undefined') {\n                      result[propName] = modelDef[propName];\n                  }\n              }\n\n              if (_getInherit(parent, schemas)) {\n                  _searchParents(_getInherit(parent, schemas), result, models, schemas);\n              }\n          }\n      }\n  }\n\n  modelDef = _getModelDef(model, this.system().models());\n\n  for (propName in modelDef) {\n      if (propName.indexOf('_') !== 0) {\n          result[propName] = modelDef[propName];\n      }\n  }\n\n  if (_getInherit(model, this.system().schemas())) {\n      _searchParents(_getInherit(model, this.system().schemas()), result, this.system().models(), this.system().schemas());\n  }\n\n  return result;\n}"
        },
        "w137d9168fa10545": {
            "_id": "w137d9168fa10545",
            "component": "Designer",
            "state": "getGeneratedSchema",
            "action": "function getGeneratedSchema(schema) { \n  var schemaDef = null,\n      result = {},\n      i = 0,\n      length = 0,\n      propName = '';\n\n  function _getSchemaDef(name, schemas) {\n      var result = '',\n          id = '';\n\n      for (id in schemas) {\n          if (schemas[id]._name === name) {\n              result = schemas[id];\n              break;\n          }\n      }\n      return result;\n  }\n\n  function _searchParents(parents, states, schemas) {\n      var parent = '',\n          schemaDef = null,\n          i = 0,\n          length = 0;\n\n      length = parents.length;\n      for (i = 0; i < length; i++) {\n          parent = parents[i];\n          if (parent === '_Component') {\n              result.init = 'init';\n              result.destroy = 'destroy';\n              result.error = 'error';\n          } else {\n              schemaDef = _getSchemaDef(parent, schemas);\n\n              for (propName in schemaDef) {\n                  if (propName.indexOf('_') !== 0) {\n                      result[propName] = schemaDef[propName];\n                  }\n              }\n\n              if (schemaDef._inherit) {\n                  _searchParents(schemaDef._inherit, result, schemas);\n              }\n          }\n      }\n  }\n\n  schemaDef = _getSchemaDef(schema, this.system().schemas());\n\n  for (propName in schemaDef) {\n      if (propName.indexOf('_') !== 0) {\n          result[propName] = schemaDef[propName];\n      }\n  }\n\n  if (schemaDef._inherit) {\n      _searchParents(schemaDef._inherit, result, this.system().schemas());\n  }\n\n  return result;\n}"
        },
        "p13d9f1c84d121d2": {
            "_id": "p13d9f1c84d121d2",
            "component": "Designer",
            "state": "isCordova",
            "action": "function isCordova() {\n  var result = false;\n  \n  if (typeof cordova !== 'undefined') {\n    result = true;\n  }\n  return result;\n}"
        },
        "p12f03101af19689": {
            "_id": "p12f03101af19689",
            "component": "Designer",
            "state": "isElectron",
            "action": "function isElectron() {\n  var result = false;\n  \n  if (typeof document !== 'undefined' && typeof global !== 'undefined') {\n    result = true;\n  }\n  return result;\n}"
        },
        "t1fd7c1387612f8f": {
            "_id": "t1fd7c1387612f8f",
            "component": "Designer",
            "state": "mergeBehavior",
            "action": "function mergeBehavior(behaviors, behavior, sysId, systemName) { \n\tvar that = this,\n\t    source = {},\n\t    lastA = -1,\n\t    firstB = -1,\n\t    lastB = -1,\n\t    toAdd = '';\n\t    \n\tfunction _getBehavior() {\n\t  var result = null,\n\t      id = '';\n\t      \n\t  for (id in behaviors) {\n\t    if (behaviors[id].state === behavior.state && behaviors[id].component === sysId) {\n\t      result = behaviors[id];\n\t      break;\n\t    }\n\t  }\n\t  \n\t  if (!result) {\n\t    result = {\n\t      \"_id\": that.require('designer').generateId(),\n\t      \"component\": sysId,\n\t      \"state\": behavior.state,\n\t      \"action\": \"function \" + behavior.state + \"() { \\n\\t\\n}\",\n\t    };\n\t  }\n\t  \n\t  return result;\n\t}  \n\t\n\tsource = _getBehavior();\n\t    \n\tlastA = source.action.lastIndexOf('}');\n\tfirstB = behavior.action.indexOf('{');\n\tlastB = behavior.action.lastIndexOf('}');\n\t\n\ttoAdd = behavior.action.substring(firstB + 1, lastB);\n\t\n\tif (toAdd.trim() !== '') { \n\t  toAdd = '\\n  // from system ' + systemName + '\\n' + toAdd + '\\n}';\n\t} else {\n\t  toAdd = '}';\n\t}\n\t\n\tsource.action = source.action.substring(0, lastA) + toAdd;\n\t\n\tbehaviors[source._id] =  source;\n}"
        },
        "s1472210b2419449": {
            "_id": "s1472210b2419449",
            "component": "Designer",
            "state": "open",
            "action": "function open(url, target, isExt) {\n    var ref = null,\n        that = this;\n    \n    function _getRelativePath() {\n      var result = 'index.html';\n      \n      switch (that.context()) {\n        case 'system':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#system#' + that.system().name();\n          }\n          break;\n        case 'schemas':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#schemas';\n            if (that.space()) {\n             result = result + '#' + that.space();\n            }\n          }\n          break;\n        case 'models':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#models';\n            if (that.space()) {\n             result = result + '#' + that.space();\n            }\n          }\n          break;\n        case 'types':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#types';\n            if (that.space()) {\n             result = result + '#' + that.space();\n            }\n          }\n          break;\n        case 'behaviors':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#behaviors';\n            if (that.space()) {\n             result = result + '#' + that.space();\n            }\n          }\n          break;\n        case 'components':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#components';\n            if (that.space()) {\n             result = result + '#' + that.space();\n            }\n          }\n          break;\n        case 'logs':\n          if (that.system()) {\n            result = result + '#' + that.system().id() + '#logs';\n          }\n          break;\n        default:\n          break;\n      }\n      \n      return result;\n    }\n    \n    switch(true) {\n      case this.isElectron():\n        if (isExt) {\n            ref = require('electron').shell.openExternal(url, target);  \n        } else {\n            if (target === '_self') {\n              window.location.href = url;\n            } else {\n              ref = window.open(url, target);\n              ref.focus();\n            }\n        }\n        break;\n      case this.isCordova():\n        if (isExt) {\n          window.open(url, '_system');\n        } else { \n          if (url.indexOf('index.html') === -1) {\n            var system = this.require('db').collections().System.find({\n                '_id': this.require('designer').system().id()\n            })[0];\n            system = JSON.parse(JSON.stringify(system));\n            delete system.classInfo;\n            \n            url = url + '?system=' + encodeURIComponent(JSON.stringify(system));\n            url = url + '&ref=' + encodeURIComponent(_getRelativePath());\n          }\n          document.location.href = url;\n        }\n        break;\n      default:\n        ref = window.open(url, target);\n        break;\n    }\n    \n    return ref;\n}"
        },
        "g1043310ce91f287": {
            "_id": "g1043310ce91f287",
            "component": "Designer",
            "state": "saveAs",
            "action": "function saveAs(data, fileName) {\n    var textToWrite = null,\n        textFileAsBlob = null,\n        fileNameToSaveAs = null,\n        downloadLink = null,\n        message = this.require('message');\n    \n    textToWrite = JSON.stringify(data);\n    fileNameToSaveAs = fileName;\n    \n    if (!this.isElectron()) {\n      \n      textFileAsBlob = new Blob([textToWrite], {\n          type: 'text/plain'\n      });\n      \n      if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(textFileAsBlob, fileNameToSaveAs);\n      } else {\n        downloadLink = document.createElement('a');\n        downloadLink.download = fileNameToSaveAs;\n        downloadLink.innerHTML = 'Download File';\n        if (window.webkitURL != null) {\n            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n        } else {\n            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n            downloadLink.onclick = function (event) {\n                document.body.removeChild(event.target);\n            };\n            downloadLink.style.display = 'none';\n            document.body.appendChild(downloadLink);\n        }\n    \n        downloadLink.click();\n      }\n      \n      message.success('Exportation is done.');\n    } else {\n      var {dialog} = global.require(\"electron\").remote;\n      var fs = global.require('fs');\n      var savePath = dialog.showSaveDialog({\n        'defaultPath': '~/' + fileNameToSaveAs\n      });\n\n      if (savePath) {\n        fs.writeFile(savePath, textToWrite, function(err) {\n          if (err) {\n            message.danger('Exportation failed.');\n          } else {\n            message.success('Exportation is done.');\n          }\n        });\n      }\n    }\n}"
        },
        "u16f78106f713bd5": {
            "_id": "u16f78106f713bd5",
            "component": "Designer",
            "state": "updateCordovaContext",
            "action": "function updateCordovaContext() {\n  var params = {},\n      urlParams = [],\n      system = null;\n      \n  urlParams = document.location.href.split('?');\n\n  if (urlParams.length > 1) {\n      urlParams = urlParams[1].split('&');\n      urlParams.forEach(function (urlParam) {\n          var name = '',\n              value = '';\n\n          name = urlParam.split('=')[0].trim();\n          value = urlParam.split('=')[1].trim();\n\n          params[name] = decodeURIComponent(value);\n      });    \n  }\n      \n      \n  if (params.system) {\n    system = JSON.parse(params.system);\n    this.require('storage').set(system._id, system);\n  }\n  \n  if (params.ref) {\n    this.require('state').lastPage(params.ref);\n  }\n}"
        }
    },
    "types": {},
    "components": {
        "Designer": {
            "designer": {
                "_id": "designer",
                "context": "",
                "debugWindow": null,
                "filter": "",
                "logs": [],
                "oldContext": "",
                "runWindow": null,
                "space": "",
                "system": {},
                "type": "designer",
                "version": "2.0.0-alpha.1"
            }
        }
    },
    "_id": "f18d311c4e11fac8"
}
