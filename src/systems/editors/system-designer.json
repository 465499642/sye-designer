{
  "_id": "e89c617b6b15d28",
  "name": "system-designer",
  "description": "A Designer for Systems",
  "version": "2.0.0-alpha.1",
  "components": {
    "Designer": {
      "designer": {
        "_id": "designer",
        "context": "",
        "debug": false,
        "debugWindow": null,
        "filter": "",
        "lastPage": "index.html",
        "logs": [],
        "menubar": {},
        "messages": [],
        "oldContext": "",
        "runWindow": null,
        "server": {},
        "space": "",
        "spaces": {},
        "state": {},
        "store": {},
        "system": {},
        "toolbar": {},
        "type": "designer",
        "version": "2.0.0-alpha.1",
        "workspace": {}
      }
    }
  },
  "behaviors": {
    "x1f1e31de1511d7d": {
      "_id": "x1f1e31de1511d7d",
      "component": "MenuBar",
      "state": "render",
      "action": "function render() { \n  var length = 0,\n      i = 0,\n      item = null,\n      domHeader = document.getElementById('designer-menubar-header'),\n      domItems = document.getElementById('designer-menubar-items'),\n      domAction = document.getElementById('designer-menubar-actions'),\n      self = this,\n      arr = window.location.href.split('#'),\n      params = window.location.href.split('?messages='),\n      messages = [],\n      context = 'system',\n      space = '',\n      designer = this.require('designer');\n\n  function _removeActive() {\n    var length = 0,\n        i = 0,\n        item = null;\n\n    length = domItems.children.length;\n    for (i = 0; i < length; i++) {\n      item = domItems.children[i];\n      $(item).removeClass('active');\n    }\n  }\n\n  // header\n  domHeader.insertAdjacentHTML('afterbegin', this.header().html().source());\n\n  // items\n  this.items().forEach(function (item) {\n    domItems.insertAdjacentHTML('beforeend', '<li>' + item.html().source() + '</>');\n  });\n\n  // events\n  var callback = function () {\n    _removeActive();\n    $(this).addClass('active');\n  };\n  length = domItems.children.length;\n  for (i = 0; i < length; i++) {\n    item = domItems.children[i];\n    item.addEventListener('click', callback);\n    item.addEventListener('click', function click() {\n      this.click();\n    }.bind(self.items(i)));\n  }\n\n  // actions\n  this.actions().forEach(function (action) {\n    domAction.insertAdjacentHTML('afterbegin', '<li>' + action.html().source() + '</>');\n  });\n\n  // focus on first element\n  // or restore the context\n  if (arr.length > 2 && arr[2].length !== 0) {\n    context = arr[2];\n    context = context.split('?')[0];\n  }\n  if (arr.length > 3) {\n    space = arr[3];\n    space = space.split('?')[0];\n  }\n  if (arr.length > 4) {\n    designer.state().component(arr[4].split('?')[0]);\n  }\n\n  for (i = 0; i < length; i++) {\n    if (this.items(i).name() === context) {\n      item = domItems.children[i];\n      $(item).addClass('active');\n    }\n  }\n  if (space) {\n    designer.space(space);\n  }\n  designer.context(context);\n\n  var that = this;\n  $('#designer-menu-action-search').on('keyup', function keyup(event) {\n    var value = $('#designer-menu-action-search').val();\n    that.designer().filter(value);\n  });\n\n  designer.updateRouter();\n\n  // run messages\n  if (params[1]) {\n    messages = JSON.parse(decodeURIComponent(params[1]));\n    designer.messages(messages);\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "l19fda1461e1d86c": {
      "_id": "l19fda1461e1d86c",
      "component": "Spaces",
      "state": "clear",
      "action": "function clear() { \n  this.require('designer').space('');\n  $('#designer-spaces-items').empty();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "a16e02190b216769": {
      "_id": "a16e02190b216769",
      "component": "Spaces",
      "state": "render",
      "action": "function render() { \n  var item = null,\n      system = this.designer().system(),\n      SpaceItem = this.require('SpaceItem'),\n      spaceItem = null,\n      space = '',\n      id = '',\n      domItems = document.getElementById('designer-spaces-items'),\n      systemdomItems = document.getElementById('designer-spaces-system-items'),\n      componentdomItems = document.getElementById('designer-spaces-components-items'),\n      self = this,\n      name = '',\n      callback = null,\n      modelsName = [],\n      showComponents = false,\n      modelName = '',\n      componentId = '';\n\n  function _removeActive() {\n    var length = 0,\n        i = 0,\n        item = null;\n\n    length = domItems.children.length;\n    for (i = 0; i < length; i++) {\n      item = domItems.children[i];\n      $(item).removeClass('active');\n    }\n  }\n\n  function _findModel(compId, components) {\n    var result = '',\n        modelName = '';\n\n    for (modelName in components) {\n      if (typeof components[modelName][compId] !== 'undefined') {\n        result = modelName;\n        break;\n      }\n    }\n    return result;\n  }\n\n  $('#designer-spaces-help').empty();\n\n  // update header and help\n  switch (this.designer().context()) {\n    case 'system':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Systems';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-system.html').source());\n      break;\n    case 'schemas':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Schemas';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-schemas.html').source());\n      break;\n    case 'models':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Models';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-models.html').source());\n      break;\n    case 'types':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Types';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-types.html').source());\n      break;\n    case 'behaviors':\n      $('#designer-spaces-spaces-system').show();\n      $('#designer-spaces-spaces-components').show();\n      document.getElementById('designer-spaces-type').innerHTML = 'Models';\n      document.getElementById('designer-spaces-system-header').innerHTML = 'System';\n      document.getElementById('designer-spaces-components-header').innerHTML = 'Components';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-behaviors.html').source());\n      break;\n    case 'components':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Models';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-components.html').source());\n      break;\n    case 'logs':\n      $('#designer-spaces-spaces-system').hide();\n      $('#designer-spaces-spaces-components').hide();\n      document.getElementById('designer-spaces-type').innerHTML = 'Logs';\n      // help\n      document.getElementById('designer-spaces-help').insertAdjacentHTML('beforeend', this.require('help-logs.html').source());\n      break;\n    default:\n      break;\n  }\n\n  // update spaces\n  // clear\n  $('#designer-spaces-items').empty();\n  $('#designer-spaces-system-items').empty();\n  $('#designer-spaces-components-items').empty();\n  if (system) {\n    switch (this.designer().context()) {\n      case 'system':\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items                   \n        var systems = this.require('storage').get('system-designer-systems'),\n            systemIds = [],\n            length = 0,\n            i = 0;\n\n        if (systems) {\n          systemIds = systems.systems;\n        }\n        length = systemIds.length;\n\n        for (i = 0; i < length; i++) {\n          system = this.require('storage').get(systemIds[i]);\n\n          spaceItem = new SpaceItem({\n              'name': system.name,\n              'uuid': system._id\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() > b.name()) {\n            result = 1;\n          }\n          if (a.name() < b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().forEach(function (item) {\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name() + '\" class=\"\"><a href=\"#' + item.uuid() + '#system#' + item.name() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n              this.click();\n          }.bind(self.items(i)));\n        }\n\n        this.items().forEach(function (item) {\n          item.on('click', function () {\n            var designer = this.require('designer'),\n                system = this.require('storage').get(this.uuid()),\n                System = this.require('System');\n                \n            if (system) {\n              designer.system(new System(system));\n            }\n            // empty log\n            designer.logs().forEach(function (item) {\n              this.logs().pop();\n            }.bind(designer));\n          });\n        });\n\n        // focus\n        if (length > 0) {\n          if ($('#designer-space-' + this.require('designer').space()).length) {\n            $('#designer-space-' + this.require('designer').space()).addClass('active');\n          } else {\n            if (this.require('designer').system()) {\n              if ($('#designer-space-' + this.require('designer').system().name()).length) {\n                $('#designer-space-' + this.require('designer').system().name()).addClass('active');\n                this.require('designer').space(this.require('designer').system().name());\n              }\n            } else {\n              item = domItems.children[0];\n              $(item).addClass('active');\n              this.require('designer').space(this.items(0).name());\n            }\n          }\n        }\n\n        break;\n      case 'schemas':\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items    \n        for (name in system.schemas()) {\n          spaceItem = new SpaceItem({\n            'name': system.schemas()[name]._name,\n            'uuid': name\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() > b.name()) {\n            result = 1;\n          }\n          if (a.name() < b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().forEach(function (item) {\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.uuid() + '\" class=\"\"><a href=\"#' + system.id() + '#schemas#' + item.uuid() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.items(i)));\n        }\n        // focus\n        if (length > 0) {\n          if ($('#designer-space-' + this.require('designer').space()).length) {\n            $('#designer-space-' + this.require('designer').space()).addClass('active');\n          } else {\n            item = domItems.children[0];\n            $(item).addClass('active');\n            this.require('designer').space(this.items(0).uuid());\n          }\n        } else {\n          this.require('designer').space('');\n        }\n        break;\n      case 'models':\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items    \n        for (name in system.models()) {\n          spaceItem = new SpaceItem({\n            'name': system.models()[name]._name,\n            'uuid': name\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() > b.name()) {\n            result = 1;\n          }\n          if (a.name() < b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().forEach(function (item) {\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.uuid() + '\" class=\"\"><a href=\"#' + system.id() + '#models#' + item.uuid() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.items(i)));\n        }\n        // focus\n        if (length > 0) {\n          if ($('#designer-space-' + this.require('designer').space()).length) {\n            $('#designer-space-' + this.require('designer').space()).addClass('active');\n          } else {\n            item = domItems.children[0];\n            $(item).addClass('active');\n            this.require('designer').space(this.items(0).uuid());\n          }\n        } else {\n          this.require('designer').space('');\n        }\n        break;\n      case 'types':\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items\n        for (name in system.types()) {\n          spaceItem = new SpaceItem({\n            'name': name\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() > b.name()) {\n            result = 1;\n          }\n          if (a.name() < b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().forEach(function (item) {\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name() + '\" class=\"\"><a href=\"#' + system.id() + '#types#' + item.name() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.items(i)));\n        }\n        // focus\n        if (length > 0) {\n          if ($('#designer-space-' + this.require('designer').space()).length) {\n            $('#designer-space-' + this.require('designer').space()).addClass('active');\n          } else {\n            item = domItems.children[0];\n            $(item).addClass('active');\n            this.require('designer').space(this.items(0).name());\n          }\n        }\n        break;\n      case 'behaviors':\n        // models\n\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items\n        for (name in system.models()) {\n          spaceItem = new SpaceItem({\n            'name': system.models()[name]._name,\n            'uuid': name\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() < b.name()) {\n            result = 1;\n          }\n          if (a.name() > b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().reverse();\n\n        this.items().forEach(function (item) {\n          modelsName.push(item.name());\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name() + '\" class=\"\"><a href=\"#' + system.id() + '#behaviors#' + item.name() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.items(i)));\n        }\n\n        // systems\n\n        this.systems().forEach(function (item) {\n          this.systems().pop();\n        }.bind(this));\n\n        // sort\n        this.systems().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() < b.name()) {\n            result = 1;\n          }\n          if (a.name() > b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        if (this.require('storage').get('system-designer-systems') && this.require('storage').get('system-designer-systems').systems.length) {\n          spaceItem = new SpaceItem({\n            'name': this.require('designer').system().name(),\n            'uuid': this.require('designer').system().id()\n          });\n          this.systems().push(spaceItem);\n        }\n\n        this.systems().reverse();\n\n        this.systems().forEach(function (item) {\n          systemdomItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name() + '\" class=\"\"><a href=\"#' + system.id() + '#behaviors#' + item.name() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = systemdomItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = systemdomItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.systems(i)));\n        }\n\n        space = this.designer().space();\n        if (modelsName.indexOf(space) !== -1) {\n          showComponents = true;\n          modelName = space;\n        } else {\n          modelName = _findModel(space, this.designer().system().components());\n          if (modelName) {\n            showComponents = true;\n          }\n        }\n\n        if (showComponents) {\n\n          // components\n          this.components().forEach(function (item) {\n            this.components().pop();\n          }.bind(this));\n\n          // components\n          for (id in system.components()[modelName]) {\n            spaceItem = new SpaceItem({\n              'name': id,\n              'uuid': id\n            });\n            this.components().push(spaceItem);\n          }\n\n          // sort\n          this.components().sort(function (idA, idB) {\n            var a = runtime.require(idA),\n                b = runtime.require(idB);\n\n            var result = 0;\n            if (a.name() < b.name()) {\n              result = 1;\n            }\n            if (a.name() > b.name()) {\n              result = -1;\n            }\n            return result;\n          });\n\n          this.components().reverse();\n\n          this.components().forEach(function (item) {\n            modelsName.push(item.name());\n            componentdomItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name().replace(/\\./g, '-') + '\" class=\"\"><a href=\"#' + system.id() + '#behaviors#' + item.name() + '\">' + item.name() + '</a></li>');\n          });\n\n          // events\n          callback = function () {\n            _removeActive();\n            $(this).addClass('active');\n          };\n          length = componentdomItems.children.length;\n          for (i = 0; i < length; i++) {\n            item = componentdomItems.children[i];\n            item.addEventListener('click', callback);\n            item.addEventListener('click', function () {\n              this.click();\n            }.bind(self.components(i)));\n          }\n        }\n\n        // focus\n        if (this.items().length > 0) {\n          if ($('#designer-space-' + this.require('designer').space().replace(/\\./g, '-')).length) {\n            $('#designer-space-' + this.require('designer').space().replace(/\\./g, '-')).addClass('active');\n          } else {\n            item = systemdomItems.children[0];\n            $(item).addClass('active');\n            this.require('designer').space(this.systems(0).name());\n          }\n        } else {\n          item = systemdomItems.children[0];\n          $(item).addClass('active');\n          this.require('designer').space(this.systems(0).name());\n        }\n\n        break;\n      case 'components':\n        // TODO find better way\n        this.items().forEach(function (item) {\n          this.items().pop();\n        }.bind(this));\n\n        // items\n        for (name in system.models()) {\n          spaceItem = new SpaceItem({\n            'name': system.models()[name]._name,\n            'uuid': name\n          });\n          this.items().push(spaceItem);\n        }\n\n        // sort\n        this.items().sort(function (idA, idB) {\n          var a = runtime.require(idA),\n              b = runtime.require(idB);\n\n          var result = 0;\n          if (a.name() > b.name()) {\n            result = 1;\n          }\n          if (a.name() < b.name()) {\n            result = -1;\n          }\n          return result;\n        });\n\n        this.items().forEach(function (item) {\n          domItems.insertAdjacentHTML('beforeend', '<li id=\"designer-space-' + item.name() + '\" class=\"\"><a href=\"#' + system.id() + '#components#' + item.name() + '\">' + item.name() + '</a></li>');\n        });\n\n        // events\n        callback = function () {\n          _removeActive();\n          $(this).addClass('active');\n        };\n        length = domItems.children.length;\n        for (i = 0; i < length; i++) {\n          item = domItems.children[i];\n          item.addEventListener('click', callback);\n          item.addEventListener('click', function () {\n            this.click();\n          }.bind(self.items(i)));\n        }\n        // focus\n        if (length > 0) {\n          if ($('#designer-space-' + this.require('designer').space()).length) {\n            $('#designer-space-' + this.require('designer').space()).addClass('active');\n          } else {\n            item = domItems.children[0];\n            $(item).addClass('active');\n            this.require('designer').space(this.items(0).name());\n          }\n        }\n\n        break;\n      case 'logs':\n        domItems.insertAdjacentHTML('beforeend', '<li class=\"active\"><a href=\"#' + system.id() + '#logs\">Console output</a></li>');\n        break;\n      default:\n        break;\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "d1cb2d156c513e03": {
      "_id": "d1cb2d156c513e03",
      "component": "Workspace",
      "state": "init",
      "action": "function init(conf) { \n  var that = this;\n\n  $('html')\n    .on('dragenter dragover', false)\n    .on('drop', function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var files = e.originalEvent.dataTransfer.files;\n      var reader = new FileReader();\n      var json = '';\n      reader.onload = function (event) {\n        json += event.target.result;\n      };\n      reader.onloadend = function () {\n        var sys = JSON.parse(json);\n        var DialogDropFile = that.require('DialogDropFile');\n\n        if (!that.require('designer').system()) {\n          DialogDropFile = new DialogDropFile({\n            'title': 'A system has been found',\n            'message': 'You can import the system.'\n          });\n        } else {\n          DialogDropFile = new DialogDropFile({\n            'title': 'A system has been found',\n            'message': 'You can import the system or compose it with the current system.'\n          });\n        }\n\n        DialogDropFile.data(sys);\n        DialogDropFile.show();\n      };\n      if (files[0]) {\n        reader.readAsText(files[0], 'UTF-8');\n      }\n    });\n}",
      "useCoreAPI": false,
      "core": false
    },
    "v1090710e8e1d9f9": {
      "_id": "v1090710e8e1d9f9",
      "component": "Workspace",
      "state": "create",
      "action": "function create() { \n  var id = '',\n      Dialog = null,\n      dialog = null,\n      system = this.require('designer').system();\n\n  function _getModelId(name) {\n    var result = '',\n        id = '';\n\n    for (id in designer.system().models()) {\n      if (designer.system().models()[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getSchemaDef(name) {\n    var result = '',\n        id = '';\n\n    for (id in designer.system().schemas()) {\n      if (designer.system().schemas()[id]._name === name) {\n        result = designer.system().schemas()[id];\n        break;\n      }\n    }\n    return result;\n  }\n\n  switch (this.designer().context()) {\n    case 'system':\n      Dialog = this.require('DialogSystemCreation');\n      dialog = new Dialog({\n        'title': 'Create a new system',\n      });\n      dialog.show();\n      dialog.on('ok', function () {\n        var designer = this.require('designer'),\n            name = null,\n            uuid = '',\n            mainUuid = '',\n            system = {},\n            System = this.require('System'),\n            ModelSystem = null,\n            modelSystem = null;\n\n        function canCreate(name) {\n          var systems = runtime.require('storage').get('system-designer-systems'),\n              systemIds = [],\n              regExp = /[\\#\\&\\(\\)\\[\\]\\'\\\"\\*\\,\\;\\:\\%]/i,\n              i = 0,\n              result = true;\n\n          if (systems) {\n              systemIds = systems.systems;\n          }\n          length = systemIds.length;\n\n          for (i = 0; i < length; i++) {\n            system = runtime.require('storage').get(systemIds[i]);\n            if (system.name === name) {\n              result = false;\n              break;\n            }\n          }\n\n          result = result && (name.match(regExp) === null);\n\n          return result;\n        }\n\n        // get value\n        name = $('#designer-dialog-system-creation-name').val();\n\n        // clean\n        name = name.trim();\n        name = name.replace(/ /gi, '-');\n\n        if (name && canCreate(name)) {\n  \n          uuid = designer.generateId();\n          mainUuid = designer.generateId();\n  \n          // set system\n          system = {\n            \"name\": name,\n            \"master\": true,\n            \"subsystem\": false,\n            \"version\": \"0.0.1\",\n            \"description\": \"\",\n            \"schemas\": {},\n            \"models\": {},\n            \"behaviors\": {},\n            \"types\": {},\n            \"components\": {},\n            \"_id\": uuid\n          };\n  \n          // add main method\n          system.behaviors[mainUuid] = {\n            \"_id\": mainUuid,\n            \"component\": uuid,\n            \"state\": \"start\",\n            \"action\": \"function start() { \\n\\t\\n}\",\n            \"useCoreAPI\": false,\n            \"core\": false\n          };\n  \n          // add (TODO improve)\n          if (designer.system()) {\n            designer.system().destroy();\n          }\n  \n          designer.system(new System(system));\n  \n          ModelSystem = this.require('ModelSystem');\n          modelSystem = new ModelSystem({\n            'title': name\n          });\n          modelSystem.uuid = uuid;\n          modelSystem.document(JSON.parse(JSON.stringify(system)));\n          modelSystem.content(JSON.stringify(system));\n  \n          designer.save();\n  \n          this.hide();\n  \n          designer.space(name);\n          designer.spaces().render();\n          designer.workspace().render();\n  \n          this.require('message').success('System created. You can now begin to create schemas.');\n        }\n      });\n      break;\n    case 'schemas':\n      if (system && Object.keys(system).length) {\n          Dialog = this.require('DialogSchemaCreation');\n          dialog = new Dialog({\n              'title': 'Create a new schema',\n          });\n          dialog.show();\n          dialog.on('ok', function () {\n            var designer = this.require('designer'),\n                name = null,\n                schema = {},\n                schemas = {},\n                ModelSchema = null,\n                modelSchema = null;\n\n            function canCreate(name) {\n              var result = true,\n                  regExp = /[\\#\\&\\(\\)\\[\\]\\'\\\"\\*\\,\\;\\:\\%]/i,\n                  id = '';\n\n              for (id in runtime.require('designer').system().schemas()) {\n                if (runtime.require('designer').system().schemas()[id]._name === name) {\n                  result = false;\n                  break;\n                }\n              }\n\n              if (runtime.require('designer').system().name() === name) {\n                result = false;\n              }\n\n              result = result && (name.match(regExp) === null);\n\n              return result;\n            }\n\n            // get value\n            name = $('#designer-dialog-schema-creation-name').val();\n\n            // clean\n            name = name.trim();\n            name = name.replace(/ /gi, '_');\n\n            if (name && canCreate(name)) {\n\n              id = designer.generateId().toString();\n\n              // set schema\n              schema = {\n                \"_id\": id,\n                \"_name\": name,\n                \"_inherit\": [\"_Component\"]\n              };\n\n              schemas = designer.system().schemas();\n              schemas[id] = schema;\n              designer.system().schemas(schemas);\n\n              ModelSchema = this.require('ModelSchema');\n              modelSchema = new ModelSchema({\n                'title': name\n              });\n\n              modelSchema.document(JSON.parse(JSON.stringify(schema)));\n              modelSchema.content(JSON.stringify(schema));\n              modelSchema.uuid(id);\n\n              designer.save();\n\n              designer.createModel(schema);\n\n              this.require('channel').$designerCreateSchema(name, schema);\n\n              this.hide();\n\n              designer.space(id);\n              designer.spaces().render();\n              designer.workspace().render();\n\n              designer.updateRouter();\n\n              this.require('message').success('Schema created. A model has been also generated.');\n            }\n        });\n      }\n      break;\n    case 'models':\n      if (system && Object.keys(system).length) {\n        Dialog = this.require('DialogModelCreation');\n        dialog = new Dialog({\n          'title': 'Create a new model',\n        });\n        dialog.show();\n        dialog.on('ok', function () {\n          this.hide();\n        });\n      }\n      break;\n    case 'types':\n      if (system && Object.keys(system).length) {\n          Dialog = this.require('DialogTypeCreation');\n          dialog = new Dialog({\n            'title': 'Create a new type',\n          });\n          dialog.show();\n          dialog.on('ok', function () {\n            var designer = this.require('designer'),\n                name = null,\n                isEnum = false,\n                type = {},\n                types = designer.system().types(),\n                ModelType = null,\n                modelType = null,\n                id = '';\n\n            // get value\n            name = $('#designer-dialog-type-creation-name').val();\n            isEnum = $('#designer-dialog-type-creation-isEnum')[0].checked;\n\n            // clean\n            name = name.trim();\n            name = name.replace(/ /gi, '_');\n\n            if (name) {\n\n              id = designer.generateId().toString();\n\n              // set system\n              if (isEnum) {\n                type = {\n                  \"_id\": id,\n                  \"name\": name,\n                  \"type\": \"any\",\n                  \"value\": [\"value1\", \"value2\"]\n                };\n              } else {\n                type = {\n                  \"_id\": id,\n                  \"name\": name,\n                  \"type\": \"object\",\n                  \"schema\": {\n                    \"property1\": {\n                      \"type\": \"any\",\n                      \"mandatory\": false,\n                      \"default\": \"\"\n                    },\n                    \"property2\": {\n                      \"type\": \"any\",\n                      \"mandatory\": false,\n                      \"default\": \"\"\n                    }\n                  }\n                };\n              }\n\n              types[name] = type;\n              designer.system().types(types);\n\n              ModelType = this.require('ModelType');\n              modelType = new ModelType({\n                'title': name\n              });\n              modelType.uuid = name;\n              modelType.document(JSON.parse(JSON.stringify(type)));\n              modelType.content(JSON.stringify(type));\n\n              designer.save();\n\n              this.require('channel').$designerCreateType(name, type);\n\n              this.hide();\n\n              designer.space(name);\n              designer.spaces().render();\n              designer.workspace().render();\n\n              this.require('message').success('Type created. You can use it in your model.');\n            }\n        });\n      }\n      break;\n    case 'components':\n      if (system && Object.keys(system).length) {\n        var designer = this.require('designer'),\n            schemas = designer.system().schemas(),\n            models = designer.system().models(),\n            components = designer.system().components(),\n            component = {},\n            ModelComponent = null,\n            modelComponent = null,\n            modelId = '',\n            modelName = '',\n            schemaName = '',\n            uuid = '',\n            modelDef = null,\n            schemaDef = null;\n\n        // get value\n        modelId = _getModelId(designer.space());\n        modelName = designer.space();\n        schemaDef = designer.getGeneratedSchema(modelName);\n\n        if (typeof models[modelName] === 'undefined') {\n\n          uuid = designer.generateId();\n\n          // set component\n          component = {\n            \"_id\": uuid,\n          };\n\n          // set properties default values\n          var propertyNames = [];\n          for (var att in schemaDef) {\n            if (schemaDef[att] === 'property') {\n              propertyNames.push(att);\n            }\n            if (schemaDef[att] === 'link') {\n              propertyNames.push(att);\n            }\n            if (schemaDef[att] === 'collection') {\n              propertyNames.push(att);\n            }\n          }\n          propertyNames.sort();\n          modelDef = designer.getGeneratedModel(modelName);\n\n          length = propertyNames.length;\n          for (var i = 0; i < length; i++) {\n            if (modelDef && modelDef[propertyNames[i]]) {\n              component[propertyNames[i]] = modelDef[propertyNames[i]].default;\n            }\n          }\n\n          if (!components[modelName]) {\n            components[modelName] = {};\n          }\n          components[modelName][uuid] = component;\n\n          designer.system().components(components);\n\n          ModelComponent = this.require('ModelComponent');\n\n          modelComponent = new ModelComponent({\n            title: uuid\n          });\n          modelComponent.model(modelName);\n          modelComponent.uuid(uuid.toString());\n          modelComponent.document(JSON.parse(JSON.stringify(component)));\n          modelComponent.content(JSON.stringify(component));\n\n          modelComponent.render();\n\n          // little effect\n          $('#designer-component-' + uuid.toString()).hide();\n          $('#designer-component-' + uuid.toString()).fadeIn(1000);\n\n          designer.save();\n\n          this.require('channel').$designerCreateComponent(modelName, component);\n        } else {\n          this.require('message').warning('There is no schema. Create a schema before creating a component.');\n        }\n      }\n      break;\n    case 'behaviors':\n        if (system && Object.keys(system).length) {\n            Dialog = this.require('DialogBehaviorCreation');\n            dialog = new Dialog({\n                'title': 'Create a new behavior',\n            });\n            dialog.show();\n            dialog.on('ok', function ok() {\n              var designer = this.require('designer'),\n                  schemas = designer.system().schemas(),\n                  models = designer.system().models(),\n                  modelDef = null,\n                  behaviors = designer.system().behaviors(),\n                  message = this.require('message'),\n                  schemaId = '',\n                  modelId = '',\n                  methodDef = null,\n                  behavior = {},\n                  result = '',\n                  body = '\\t\\n',\n                  ModelBehavior = null,\n                  modelBehavior = null,\n                  model = '',\n                  state = '',\n                  uuid = '',\n                  params = '',\n                  canCreate = true,\n                  i = 0,\n                  length = 0,\n                  componentId = '';\n\n              function _getSchemaId(name) {\n                var result = '',\n                    id = '';\n\n                for (id in designer.system().schemas()) {\n                  if (designer.system().schemas()[id]._name === name) {\n                    result = id;\n                    break;\n                  }\n                }\n                return result;\n              }\n\n              function _getModelId(name) {\n                var result = '',\n                    id = '';\n\n                for (id in designer.system().models()) {\n                  if (designer.system().models()[id]._name === name) {\n                    result = id;\n                    break;\n                  }\n                }\n                return result;\n              }\n\n              function _existBehavior(state, space, model) {\n                  var result = false;\n\n                  if (_isModel(space)) {\n                    for (id in designer.system().behaviors()) {\n                      if (designer.system().behaviors()[id].state === state && designer.system().behaviors()[id].component === model) {\n                        result = true;\n                        break;\n                      }\n                    }\n                } else {\n                    for (id in designer.system().behaviors()) {\n                      if (designer.system().behaviors()[id].state === state && designer.system().behaviors()[id].component === space) {\n                        result = true;\n                        break;\n                      }\n                    }\n                }\n                return result;\n              }\n\n              function _findSchemaId(compId) {\n                var result = compId,\n                    modelName = '';\n\n                for (modelName in designer.system().components()) {\n                  if (typeof designer.system().components()[modelName][compId] !== 'undefined') {\n                    result = modelName;\n                    break;\n                  }\n                }\n                return result;\n              }\n\n              function _isModel(name) {\n                var result = false;\n\n                if (Object.keys(designer.system().components()).indexOf(name) !== -1) {\n                  result = true;\n                }\n\n                return result;\n              }\n\n              // get value\n              model = _findSchemaId(designer.space());\n              state = $('#designer-dialog-behavior-creation-state').val();\n              componentId = designer.space();\n\n              if (model && state) {\n\n                uuid = designer.generateId();\n\n                if (model !== designer.system().name()) {\n\n                  schemaId = _getSchemaId(model);\n                  modelId = _getModelId(model);\n                  modelDef = designer.getGeneratedModel(model);\n\n                  // params\n                  if (modelDef[state]) {\n                    methodDef = modelDef[state].params;\n                  }\n                  if (methodDef && methodDef.length) {\n                    length = methodDef.length;\n                    for (i = 0; i < length; i++) {\n                      if (i === 0) {\n                        params = methodDef[i].name;\n                      } else {\n                        params = params + ', ' + methodDef[i].name;\n                      }\n                    }\n                  }\n\n                  if (schemas[schemaId][state] === 'property' || schemas[schemaId][state] === 'link') {\n                    params = 'value';\n                  }\n\n                  if (schemas[schemaId][state] === 'collection') {\n                    params = 'value, type';\n                  }\n\n                  if (schemas[schemaId][state] === 'method') {\n                    if (_existBehavior(state, designer.space(), model)) {\n                      canCreate = false;\n                    }\n                  }\n\n                  if (state === 'init') {\n                    params = 'conf';\n                    if (_existBehavior(state, designer.space(), model)) {\n                      canCreate = false;\n                    }\n                  }\n\n                  if (state === 'destroy') {\n                    if (_existBehavior(state, designer.space(), model)) {\n                      canCreate = false;\n                    }\n                  }\n\n                  if (state === 'error') {\n                    params = 'data';\n                    if (_existBehavior(state, designer.space(), model)) {\n                      canCreate = false;\n                    }\n                  }\n\n                  // body\n                  if (modelDef[state]) {\n                    result = modelDef[state].result;\n                  }\n                  if (result) {\n                    switch (result) {\n                      case 'string':\n                        body = \"\\tvar result = '';\\n\\treturn result;\\n\";\n                        break;\n                      case 'array':\n                        body = \"\\tvar result = [];\\n\\treturn result;\\n\";\n                        break;\n                      case 'number':\n                        body = \"\\tvar result = 0;\\n\\treturn result;\\n\";\n                        break;\n                      case 'object':\n                        body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n                        break;\n                      default:\n                        body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n                        break;\n                    }\n                  }\n              } else {\n                  componentId = designer.system().id();\n                  if (_existBehavior(state, componentId, model)) {\n                    canCreate = false;\n                  }\n              }\n\n              if (canCreate) {\n                // set model\n                if (state !== 'destroy') {\n                  behavior = {\n                    \"_id\": uuid,\n                    \"component\": componentId,\n                    \"state\": state,\n                    \"action\": \"function \" + state + \"(\" + params + \") { \\n\" + body + \"}\",\n                    \"useCoreAPI\": false,\n                    \"core\": false\n                  };\n                } else {\n                  behavior = {\n                    \"_id\": uuid,\n                    \"component\": componentId,\n                    \"state\": \"destroy\",\n                    \"action\": \"function destroy() { \\n\\n  // destroy the component\\n  $component.destroy(this.id());\\n}\",\n                    \"useCoreAPI\": true,\n                    \"core\": false\n                  };\n                  }\n\n                  behaviors[uuid] = behavior;\n                  designer.system().behaviors(behaviors);\n\n                  ModelBehavior = this.require('ModelBehavior');\n\n                  modelBehavior = new ModelBehavior({\n                    'uuid': uuid\n                  });\n\n                  modelBehavior.title(state);\n                  modelBehavior.document(behavior);\n                  modelBehavior.content(JSON.parse(JSON.stringify(behavior.action)));\n\n                  this.hide();\n                  modelBehavior.render();\n\n                  Prism.highlightAll();\n\n                  // little effect\n                  $('#designer-behavior-' + uuid.toString()).hide();\n                  $('#designer-behavior-' + uuid.toString()).fadeIn(1000);\n\n                  designer.save();\n\n                  this.require('channel').$designerCreateBehavior(behavior);\n                } else {\n                  this.hide();\n                  message.warning('Can not create two behaviors for a method.');\n                }\n              }\n          });\n        }\n        break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "f134d11639b1c4fe": {
      "_id": "f134d11639b1c4fe",
      "component": "Workspace",
      "state": "clear",
      "action": "function clear() { \n  $('#designer-workspace').empty();\n  jsPlumb.ready(function () {\n    jsPlumb.deleteEveryEndpoint();\n  });\n}",
      "useCoreAPI": false,
      "core": false
    },
    "k174661f0221b8d0": {
      "_id": "k174661f0221b8d0",
      "component": "Server",
      "state": "start",
      "action": "function start() { \n  var RuntimeChannel = null,\n      channel = null;\n\n  RuntimeChannel = this.require('_Channel');\n  channel = new RuntimeChannel({\n    '_id': 'channel'\n  });\n\n  channel.on('send', function send(message) {\n    if (message.event.indexOf('$system') !== 0) {\n      var config = this.require('storage').get('system-designer-config');\n      // message for other windows\n      this.require('storage').set('system-designer-message', message);\n\n      // message for client uggug\n      if (this.require('designer').debugWindow()) {\n        this.require('designer').debugWindow().postMessage(JSON.stringify(message), '*');\n      }\n\n      // message for server debug\n      if (typeof config !== 'undefined' && typeof config.debugType !== 'undefined' && config.debugType === 'server' && config.urlServer) {\n        $.post(config.urlServer + ':8888/' + message.event, encodeURIComponent(JSON.stringify(message.data)));\n      }\n    }\n  });\n\n  channel.on('$appLogDebug', function $appLogDebug(message) {\n    var log = '',\n        Log = null;\n\n    Log = this.require('Log');\n    log = new Log({\n      'type': 'debug',\n      'log': message.replace('runtime:', '').replace(/\\[[^\\]]+\\]/, '<strong>debug:</strong> ')\n    });\n\n    this.require('designer').logs().push(log);\n    this.require('message').info(message.replace(/\\[[^\\]]+\\]/, '<strong>runtime:</strong> '));\n  });\n\n  channel.on('$appLogInfo', function $appLogInfo(message) {\n    var log = '',\n        Log = null;\n\n    Log = this.require('Log');\n    log = new Log({\n      'type': 'info',\n      'log': message.replace('runtime:', '').replace(/\\[[^\\]]+\\]/, '<strong>info:</strong> ')\n    });\n\n    this.require('designer').logs().push(log);\n    this.require('message').info(message.replace(/\\[[^\\]]+\\]/, '<strong>runtime:</strong> '));\n  });\n\n  channel.on('$appLogWarn', function $appLogWarn(message) {\n    var log = '',\n        Log = null;\n\n    Log = this.require('Log');\n    log = new Log({\n      'type': 'warn',\n      'log': message.replace('runtime:', '').replace(/\\[[^\\]]+\\]/, '<strong>warning:</strong> ')\n    });\n\n    this.require('designer').logs().push(log);\n    this.require('message').warning(message.replace(/\\[[^\\]]+\\]/, '<strong>runtime:</strong> '));\n  });\n\n  channel.on('$appLogError', function $appLogError(message) {\n    var log = '',\n        Log = null;\n\n    Log = this.require('Log');\n    log = new Log({\n      'type': 'error',\n      'log': message.replace('runtime:', '').replace(/\\[[^\\]]+\\]/, '<strong>error:</strong> ')\n    });\n\n    this.require('designer').logs().push(log);\n    this.require('message').danger(message.replace(/\\[[^\\]]+\\]/, '<strong>runtime:</strong> '));\n  });\n\n  channel.on('$editorUpdateType', function $editorUpdateType(id, type) {\n    var designer = this.require('designer'),\n        types = designer.system().types();\n\n    types[id] = type;\n    designer.system().types(types);\n\n    designer.save();\n\n    designer.space(type.name);\n    designer.spaces().render();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorDeleteType', function $editorDeleteType(id) {\n    var designer = this.require('designer'),\n        types = designer.system().types(),\n        dbTypes = [],\n        type = null;\n\n    dbTypes = this.require('db').collections().ModelType.find({\n      'uuid': id\n    });\n    if (dbTypes.length) {\n      type = this.require(dbTypes[0]._id);\n      if (type) {\n        type.hide();\n        type.destroy();\n      }\n    }\n\n    delete types[id];\n    designer.system().types(types);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateSchemaName', function $editorUpdateSchemaName(name, id) {\n    var designer = this.require('designer'),\n        oldName = designer.system().schemas()[id]._name,\n        models = designer.system().models(),\n        behaviors = designer.system().behaviors(),\n        components = designer.system().components(),\n        modelId = '',\n        behaviorId = '',\n        behavior = null;\n\n    function _getModelId(name, models) {\n      var result = '',\n          id = '';\n\n      for (id in models) {\n        if (models[id]._name === name) {\n          result = id;\n          break;\n        }\n      }\n      return result;\n    }\n\n    modelId = _getModelId(oldName, designer.system().models());\n\n    // update model\n    models[modelId]._name = name;\n    designer.system().models(models);\n\n    // update behaviors\n    for (behaviorId in behaviors) {\n      if (behaviors[behaviorId].component === oldName) {\n        behaviors[behaviorId].component = name;\n\n        designer.system().behaviors(behaviors);\n      }\n    }\n\n    // components\n    if (components[oldName]) {\n      components[name] = JSON.parse(JSON.stringify(components[oldName]));\n      delete components[oldName];\n\n      designer.system().components(components);\n    }\n\n    designer.save();\n  });\n\n  channel.on('$editorUpdateSchema', function $editorUpdateSchema(id, schema) {\n    var designer = this.require('designer'),\n        schemas = designer.system().schemas(),\n        models = null,\n        model = null,\n        modelId = '';\n\n    jsPlumb.deleteEveryEndpoint();\n\n    designer.syncModel(schema);\n    schemas[id] = schema;\n    designer.system().schemas(schemas);\n    designer.save();\n\n    // sync other components\n    models = designer.system().models();\n    for (modelId in models) {\n      if (models[modelId]._name !== schema._name) {\n        model = models[modelId];\n        designer.syncComponent(model, true);\n      }\n    }\n\n    designer.space(id);\n    designer.spaces().render();\n    designer.workspace().render();\n  });\n\n  channel.on('$designerDeleteSchema', function $designerDeleteSchema(id) {\n    var designer = this.require('designer'),\n        schemas = designer.system().schemas(),\n        dbSchemas = [],\n        schema = null;\n\n    dbSchemas = this.require('db').collections().ModelSchema.find({\n      'uuid': id\n    });\n    if (dbSchemas.length) {\n      schema = this.require(dbSchemas[0]._id);\n      if (schema) {\n        schema.hide();\n        schema.destroy();\n      }\n    }\n\n    delete schemas[id];\n    designer.system().schemas(schemas);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateSchemaId', function $editorUpdateSchemaId(oldId, newId) {\n    var designer = this.require('designer'),\n        schemas = designer.system().schemas(),\n        dbSchemas = [],\n        schema = null;\n\n    schema = JSON.parse(JSON.stringify(schemas[oldId]));\n\n    delete schemas[oldId];\n\n    schema._id = newId;\n    schemas[newId] = schema;\n    designer.system().schemas(schemas);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateModel', function $editorUpdateModel(id, model) {\n    var designer = this.require('designer'),\n        models = designer.system().models();\n\n    jsPlumb.deleteEveryEndpoint();\n\n    models[id] = model;\n    designer.system().models(models);\n\n    designer.save();\n\n    designer.syncBehavior(model);\n\n    designer.space(id);\n    designer.spaces().render();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateModelId', function $editorUpdateModelId(oldId, newId) {\n    var designer = this.require('designer'),\n        models = designer.system().models(),\n        model = null;\n\n    model = JSON.parse(JSON.stringify(models[oldId]));\n\n    delete models[oldId];\n\n    model._id = newId;\n    models[newId] = model;\n\n    designer.system().models(models);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateBehavior', function $editorUpdateBehavior(id, behavior) {\n    var designer = this.require('designer'),\n        behaviors = designer.system().behaviors();\n\n    behaviors[id] = behavior;\n    designer.system().behaviors(behaviors);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorDeleteBehavior', function $editorDeleteBehavior(id) {\n    var designer = this.require('designer'),\n        behaviors = designer.system().behaviors(),\n        dbBehaviors = [],\n        behavior = null;\n\n    dbBehaviors = this.require('db').collections().ModelBehavior.find({\n      'uuid': id\n    });\n    if (dbBehaviors.length) {\n      behavior = this.require(dbBehaviors[0]._id);\n      if (behavior) {\n        behavior.hide();\n        behavior.destroy();\n      }\n    }\n\n    delete behaviors[id];\n    designer.system().behaviors(behaviors);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateComponent', function $editorUpdateComponent(id, collection, component) {\n      var designer = this.require('designer'),\n          components = designer.system().components();\n\n      components[collection][id] = component;\n      designer.system().components(components);\n\n      designer.save();\n\n      designer.workspace().render();\n  });\n\n  channel.on('$editorDeleteComponent', function $editorDeleteComponent(id, collection) {\n    var designer = this.require('designer'),\n        components = designer.system().components(),\n        models = [],\n        model = null;\n\n    models = this.require('db').collections().ModelComponent.find({\n      'uuid': id\n    });\n    if (models.length) {\n      model = this.require(models[0]._id);\n      if (model) {\n        model.hide();\n        model.destroy();\n      }\n    }\n\n    delete components[collection][id];\n    designer.system().components(components);\n\n    designer.save();\n    designer.workspace().render();\n  });\n\n  channel.on('$editorUpdateSystem', function $editorUpdateSystem(id, system) {\n    var System = this.require('System'),\n        sys = null,\n        designer = this.require('designer');\n\n    if (designer.system()) {\n      designer.system().destroy();\n    }\n    sys = new System(system);\n    designer.system(sys);\n    designer.save();\n\n    designer.space(system.name);\n    designer.spaces().render();\n    designer.workspace().render();\n  });\n\n  channel.on('$appLoadSystem', function $appLoadSystem(system) {\n    var Dialog = null,\n        dialog = null;\n\n    if (system.name !== 'app-designer-testing') {\n\n      Dialog = this.require('DialogImport');\n      dialog = new Dialog({\n        'title': 'A system has been found',\n        'message': 'Do you want to import the system ?',\n        'data': system\n      });\n      dialog.show();\n\n      dialog.on('ok', function () {\n        var System = this.require('System'),\n            sys = null,\n            designer = this.require('designer'),\n            message = this.require('message');\n\n        if (designer.system()) {\n          designer.system().destroy();\n        }\n        sys = new System(this.data());\n        designer.system(sys);\n\n        // empty log\n        designer.logs().forEach(function (item) {\n          this.logs().pop();\n        }.bind(designer));\n\n        designer.save();\n\n        designer.space(sys.name());\n        designer.spaces().render();\n        designer.workspace().render();\n\n        designer.updateRouter();\n\n        this.hide();\n        designer.save();\n\n        message.success('Importation of the system is done.');\n      });\n    }\n  });\n\n  channel.on('$runtimeCreateComponent', function $runtimeCreateComponent(collection, document) {\n    var designer = this.require('designer'),\n        components = designer.system().components();\n\n    if (typeof components[collection] === 'undefined') {\n      components[collection] = {};\n    }\n\n    delete document.classInfo;\n\n    components[collection][document._id] = document;\n    designer.system().components(components);\n\n    designer.save();\n\n    if (designer.context() === 'components') {\n      designer.workspace().render();\n    }\n  });\n\n  channel.on('$runtimeDeleteComponent', function $runtimeDeleteComponent(id, collection) {\n    var designer = this.require('designer'),\n        components = designer.system().components();\n\n    if (typeof components[collection] !== 'undefined') {\n      delete components[collection][id];\n      designer.system().components(components);\n\n      designer.save();\n\n      if (designer.context() === 'components') {\n        designer.workspace().render();\n      }\n    }\n  });\n\n  channel.on('$runtimeUpdateComponent', function $runtimeUpdateComponent(id, collection, field, value) {\n    var designer = this.require('designer'),\n        components = designer.system().components();\n\n    if (typeof components[collection] !== 'undefined' && components[collection][id] !== 'undefined') {\n      components[collection][id][field] = value;\n      designer.system().components(components);\n\n      designer.save();\n\n      if (designer.context() === 'components') {\n        designer.workspace().render();\n      }\n    }\n  });\n\n  window.addEventListener('message', function message(event) {\n    var data = null,\n        config = this.require('storage').get('system-designer-config');\n\n    if (!config) {\n      config = {};\n    }\n    data = JSON.parse(event.data);\n    if (data &&\n      typeof data.event !== 'undefined' &&\n      typeof data.from !== 'undefined' &&\n      typeof data.data !== 'undefined') {\n      $db._Message.insert(data);\n    }\n  }.bind(channel), false);\n\n  this.require('storage').on('changed', function changed(obj) {\n    if (typeof obj['system-designer-message'] !== 'undefined') {\n      if (this.require('designer').debugWindow()) {\n        this.require('designer').debugWindow().postMessage(JSON.stringify(obj['system-designer-message'].newValue), '*');\n      }\n      $db._Message.insert(obj['system-designer-message'].newValue);\n    }\n  }, true);\n}",
      "useCoreAPI": true,
      "core": false
    },
    "i131bd1870a18e7a": {
      "_id": "i131bd1870a18e7a",
      "component": "e89c617b6b15d28",
      "state": "start",
      "action": "function start() { \n  this.require('designer').render();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "l1b9611fc10168ec": {
      "_id": "l1b9611fc10168ec",
      "component": "Designer",
      "state": "logs",
      "action": "function logs(value, type) { \n  var html = '';\n\n  if (type === 'add' && this.context() === 'logs') {\n    switch (value.type()) {\n      case 'debug':\n        html = html + '<p class=\"text-muted\">' + value.log() + '</p>';\n        break;\n      case 'info':\n        html = html + '<p class=\"text-info\">' + value.log() + '</p>';\n        break;\n      case 'warn':\n        html = html + '<p class=\"text-warning\">' + value.log() + '</p>';\n        break;\n      case 'error':\n        html = html + '<p class=\"text-danger\">' + value.log() + '</p>';\n        break;\n      default:\n        break;\n    }\n\n    document.querySelector('#designer-loug-output').insertAdjacentHTML('afterbegin',\n      html\n    );\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "p1d00311ad51ef9a": {
      "_id": "p1d00311ad51ef9a",
      "component": "Designer",
      "state": "welcome",
      "action": "function welcome() { \n  var Dialog = null,\n      dialog = null,\n      config = null;\n\n  config = this.require('storage').get('system-designer-config');\n  if (!config) {\n    config = {};\n  }\n\n  if (typeof config.welcomeScreen === 'undefined') {\n    Dialog = this.require('DialogWelcome');\n    dialog = new Dialog({\n      'title': 'Welcome to System Designer'\n    });\n    dialog.show();\n    dialog.on('ok', function ok() {\n      var config = this.require('storage').get('system-designer-config');\n      if (!config) {\n        config = {};\n      }\n      config.welcomeScreen = false;\n      this.require('storage').set('system-designer-config', config);\n      this.hide();\n    });\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "o12c7d1448a1dc16": {
      "_id": "o12c7d1448a1dc16",
      "component": "Designer",
      "state": "render",
      "action": "function render() {\n  var MenuBar = null,\n    menubar = null,\n    ToolBar = null,\n    toolbar = null,\n    Workspace = null,\n    workspace = null,\n    DesignerState = null,\n    designerState = null,\n    Spaces = null,\n    spaces = null,\n    System = null,\n    systemId = '',\n    Server = null,\n    server = null;\n\n  // menu\n  MenuBar = this.require('MenuBar');\n  menubar = new MenuBar({\n    designer: this\n  });\n  ToolBar = this.require('ToolBar');\n  toolbar = new ToolBar({\n    designer: this\n  });\n\n  // workspace\n  Workspace = this.require('Workspace');\n  workspace = new Workspace({\n    designer: this\n  });\n\n  // spaces\n  Spaces = this.require('Spaces');\n  spaces = new Spaces({\n    designer: this\n  });\n\n  // server\n  Server = this.require('Server');\n  server = new Server({\n    'designer': this\n  });\n\n  this.menubar(menubar);\n  this.toolbar(toolbar);\n  this.workspace(workspace);\n  this.spaces(spaces);\n  this.server(server);\n\n  // message\n  this.require('logger').on('warn', function warn(message) {\n    this.require('message').warning(message);\n  });\n  this.require('logger').on('error', function error(message) {\n    this.require('message').danger(message);\n  });\n\n  // state\n  DesignerState = this.require('DesignerState');\n  designerState = new DesignerState();\n\n  this.state(designerState);\n\n  // system\n  System = this.require('System');\n  var systems = this.require('storage').get('system-designer-systems');\n\n  // case of url\n  switch (true) {\n    case window.location.href.split('#').length > 1 && window.location.href.split('#')[1].length > 0:\n      systemId = window.location.href.split('#')[1];\n      if (this.require('storage').get(systemId)) {\n        this.system(new System(this.require('storage').get(systemId)));\n      }\n      break;\n    default:\n      if (systems && systems.systems && systems.systems.length && systems.systems[0].length) {\n        systems.systems.sort(function (sysA, sysB) {\n          var a = this.require('storage').get(sysA),\n            b = this.require('storage').get(sysB),\n            result = 0;\n\n          if (a.name > b.name) {\n            result = 1;\n          }\n          if (a.name < b.name) {\n            result = -1;\n          }\n          return result;\n        }.bind(this));\n\n        this.system(new System(this.require('storage').get(systems.systems[0])));\n      }\n      break;\n  }\n  this.welcome();\n\n  // add event when history change\n  var that = this;\n  window.onhashchange = function (e) {\n    var arr = window.location.href.split('#'),\n      system = '',\n      collection = 'system',\n      component = '',\n      i = 0,\n      length = 0,\n      item = null,\n      domItems = null;\n\n    if (arr.length > 1) {\n      system = arr[1];\n      system = system.split('?')[0];\n    }\n\n    if (arr.length > 2) {\n      collection = arr[2];\n      collection = collection.split('?')[0];\n    }\n\n    if (arr.length > 3) {\n      component = arr[3];\n      component = component.split('?')[0];\n    }\n\n    if (arr.length > 4) {\n      that.state().component(arr[4].split('?')[0]);\n    } else {\n      that.state().component('');\n    }\n\n    if (arr.length > 1 && system) {\n      that.system(new System(that.require('storage').get(system)));\n    } else {\n      if (systems && systems.systems && systems.systems.length) {\n        that.system(new System(that.require('storage').get(systems.systems[0])));\n      }\n    }\n\n    that.space(component);\n    that.context(collection);\n\n    // focus\n    domItems = document.getElementById('designer-menubar-items');\n    length = that.menubar().items().length;\n    for (i = 0; i < length; i++) {\n      item = domItems.children[i];\n      $(item).removeClass('active');\n    }\n    for (i = 0; i < length; i++) {\n      if (that.menubar().items(i).name() === collection) {\n        item = domItems.children[i];\n        $(item).addClass('active');\n      }\n    }\n\n    that.updateRouter();\n  };\n  // resize event\n  $(window).resize(function () {\n    jsPlumb.repaintEverything();\n  });\n\n  this.menubar().render();\n  this.toolbar().render();\n  this.spaces().render();\n\n  $(function () {\n    $('[data-toggle=\"tooltip\"]').tooltip({ 'container': 'body', delay: { 'show': 2000, 'hide': 100 }, trigger: 'hover' });\n  });\n\n  this.server().start();\n\n  // run messages if any\n  this.runMessages(this.messages());\n  this.messages([]);\n}",
      "useCoreAPI": false,
      "core": false
    },
    "w105e21da1613695": {
      "_id": "w105e21da1613695",
      "component": "Designer",
      "state": "filter",
      "action": "function filter(value) { \n  var result = [],\n      collectionName = '';\n\n  switch (this.context()) {\n    case 'behaviors':\n      collectionName = 'ModelBehavior';\n      break;\n    case 'schemas':\n      collectionName = 'ModelSchema';\n      break;\n    case 'types':\n      collectionName = 'ModelType';\n      break;\n    case 'models':\n      collectionName = 'ModelClass';\n      break;\n    case 'components':\n      collectionName = 'ModelComponent';\n      break;\n    case 'system':\n      collectionName = 'ModelSystem';\n      break;\n    default:\n      break;\n  }\n\n  var resultTemp = this.require('db').collections()[collectionName].find({});\n  for (var index = 0; index < resultTemp.length; index++) {\n    result.push(this.require(resultTemp[index]._id));\n  }\n  if (val.length > 0) {\n    result.forEach(function (model) {\n      if (model.content().toLowerCase().indexOf(val.toLowerCase()) === -1) {\n        model.hide();\n      } else {\n        model.show();\n      }\n    });\n  } else {\n    result.forEach(function (model) {\n      model.show();\n    });\n  }\n\n  switch (this.context()) {\n    case 'schemas':\n    case 'models':\n      jsPlumb.repaintEverything();\n      break;\n    default:\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "n1fed119b1215f7f": {
      "_id": "n1fed119b1215f7f",
      "component": "Designer",
      "state": "context",
      "action": "function context(value) { \n  jsPlumb.ready(function () {\n    jsPlumb.deleteEveryEndpoint();\n  });\n\n  this.spaces().render();\n  this.workspace().clear();\n  this.workspace().render();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "p1d40c1875017cc6": {
      "_id": "p1d40c1875017cc6",
      "component": "Designer",
      "state": "space",
      "action": "function space(value) { \n  if (this.context() === 'system') {\n    this.updateRouter();\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "s16a871f0a51a0e8": {
      "_id": "s16a871f0a51a0e8",
      "component": "Designer",
      "state": "updateRouter",
      "action": "function updateRouter() { \n  var menubar = [],\n      i = 0,\n      length = 0,\n      collection = '',\n      href = '',\n      context = '',\n      space = '',\n      schemaName = '',\n      schemaId = '',\n      modelName = '',\n      modelId = '';\n\n  function _getModelId(name, models) {\n    var result = '',\n        id = '';\n\n    for (id in models) {\n      if (models[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getSchemaId(name, schemas) {\n    var result = '',\n        id = '';\n\n    for (id in schemas) {\n      if (schemas[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getModelName(id, models) {\n    var result = '',\n        modelId = '';\n\n    for (modelId in models) {\n      if (modelId === id) {\n        result = models[id]._name;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getSchemaName(id, schemas) {\n    var result = '',\n        schemaId = '';\n\n    for (schemaId in schemas) {\n      if (schemaId === id) {\n        result = schemas[id]._name;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getCollection(href) {\n    var result = '';\n\n    if (href.split('#').length === 2) {\n      result = href.split('#')[1];\n    }\n    if (href.split('#').length > 2) {\n      result = href.split('#')[2];\n    }\n\n    result = result.split('#')[0];\n    result = result.trim();\n\n    return result;\n  }\n\n  context = this.require('designer').context();\n  space = this.require('designer').space();\n\n  switch (context) {\n    case 'schemas':\n      if (this.require('designer').system()) {\n        if (space) {\n          schemaName = _getSchemaName(space, this.require('designer').system().schemas());\n          modelId = _getModelId(schemaName, this.require('designer').system().models());\n        }\n\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '#' + this.require('designer').system().id() + '#' + collection;\n\n          if (collection === 'models' && modelId) {\n            menubar[i].href = menubar[i].href + '#' + modelId;\n          }\n          if (collection === 'components' && schemaName) {\n            menubar[i].href = menubar[i].href + '#' + schemaName;\n          }\n          if (collection === 'behaviors' && schemaName) {\n            menubar[i].href = menubar[i].href + '#' + schemaName;\n          }\n        }\n      } else {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '##' + collection;\n        }\n      }\n      break;\n    case 'models':\n      if (this.require('designer').system()) {\n        if (space) {\n          modelName = _getModelName(space, this.require('designer').system().models());\n          schemaId = _getSchemaId(modelName, this.require('designer').system().schemas());\n        }\n\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '#' + this.require('designer').system().id() + '#' + collection;\n\n          if (collection === 'schemas' && schemaId) {\n            menubar[i].href = menubar[i].href + '#' + schemaId;\n          }\n          if (collection === 'components' && modelName) {\n            menubar[i].href = menubar[i].href + '#' + modelName;\n          }\n          if (collection === 'behaviors' && modelName) {\n            menubar[i].href = menubar[i].href + '#' + modelName;\n          }\n        }\n      } else {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '##' + collection;\n        }\n      }\n      break;\n    case 'behaviors':\n      if (this.require('designer').system()) {\n        if (space) {\n          modelId = _getModelId(space, this.require('designer').system().models());\n          schemaId = _getSchemaId(space, this.require('designer').system().schemas());\n          schemaName = _getSchemaName(schemaId, this.require('designer').system().schemas());\n        }\n\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '#' + this.require('designer').system().id() + '#' + collection;\n\n          if (collection === 'schemas' && schemaId) {\n            menubar[i].href = menubar[i].href + '#' + schemaId;\n          }\n          if (collection === 'models' && modelId) {\n            menubar[i].href = menubar[i].href + '#' + modelId;\n          }\n          if (collection === 'components' && modelId) {\n            menubar[i].href = menubar[i].href + '#' + schemaName;\n          }\n        }\n      } else {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '##' + collection;\n        }\n      }\n      break;\n    case 'components':\n      if (this.require('designer').system()) {\n        if (space) {\n          modelId = _getModelId(space, this.require('designer').system().models());\n          schemaId = _getSchemaId(space, this.require('designer').system().schemas());\n          schemaName = _getSchemaName(schemaId, this.require('designer').system().schemas());\n        }\n\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '#' + this.require('designer').system().id() + '#' + collection;\n\n          if (collection === 'schemas' && schemaId) {\n            menubar[i].href = menubar[i].href + '#' + schemaId;\n          }\n          if (collection === 'models' && modelId) {\n            menubar[i].href = menubar[i].href + '#' + modelId;\n          }\n          if (collection === 'behaviors' && modelId) {\n            menubar[i].href = menubar[i].href + '#' + schemaName;\n          }\n        }\n      } else {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '##' + collection;\n        }\n      }\n      break;\n    default:\n      if (this.require('designer').system()) {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '#' + this.require('designer').system().id() + '#' + collection;\n        }\n      } else {\n        menubar = $('#designer-menubar-items > li > a');\n        length = menubar.length;\n        for (i = 0; i < length; i++) {\n          href = menubar[i].href;\n          collection = _getCollection(href);\n          menubar[i].href = '##' + collection;\n        }\n      }\n      break;\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "f16ac618cb31a9ad": {
      "_id": "f16ac618cb31a9ad",
      "component": "Designer",
      "state": "createBehavior",
      "action": "function createBehavior(type, model, state, def) { \n  var body = '\\t\\n',\n      behaviors = this.system().behaviors();\n\n  function _canCreate(type, component, state, behaviors) {\n    var behavior = {},\n        id = '',\n        exist = false,\n        result = true;\n\n    for (id in behaviors) {\n      behavior = behaviors[id];\n      if (behavior.component === component && behavior.state === state) {\n        exist = true;\n        break;\n      }\n    }\n    if (exist) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  if (_canCreate(type, model, state, behaviors)) {\n    uuid = this.generateId();\n\n    // params\n    methodDef = def.params;\n    if (methodDef && methodDef.length) {\n      length = methodDef.length;\n      for (i = 0; i < length; i++) {\n        if (i === 0) {\n          params = methodDef[i].name;\n        } else {\n          params = params + ', ' + methodDef[i].name;\n        }\n      }\n    }\n\n    // body\n    result = def.result;\n    if (result) {\n      switch (result) {\n        case 'string':\n          body = \"\\tvar result = '';\\n\\treturn result;\\n\";\n          break;\n        case 'array':\n          body = \"\\tvar result = [];\\n\\treturn result;\\n\";\n          break;\n        case 'number':\n          body = \"\\tvar result = 0;\\n\\treturn result;\\n\";\n          break;\n        case 'object':\n          body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n          break;\n        default:\n          body = \"\\tvar result = {};\\n\\treturn result;\\n\";\n          break;\n      }\n    }\n\n    // set behavior\n    behavior = {\n      \"_id\": uuid,\n      \"component\": model,\n      \"state\": state,\n      \"action\": \"function \" + state + \"(\" + params + \") { \\n\" + body + \"}\",\n      \"useCoreAPI\": false,\n      \"core\": false\n    };\n\n    behaviors[uuid] = behavior;\n\n    this.system().behaviors(behaviors);\n    this.save();\n\n    this.require('channel').$designerCreateBehavior(behavior);\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "z1e0f012ab11425f": {
      "_id": "z1e0f012ab11425f",
      "component": "Designer",
      "state": "deleteSchema",
      "action": "function deleteSchema(schemaId) { \n\n        var behaviorId = '',\n            modelId = '',\n            behavior = null,\n            schemas = this.system().schemas(),\n            models = this.system().models(),\n            behaviors = this.system().behaviors(),\n            components = this.system().components(),\n            schemaName = schemas[schemaId]._name;\n\n        function _getModelId(name, models) {\n            var result = '',\n                id = '';\n\n            for (id in models) {\n                if (models[id]._name === name) {\n                    result = id;\n                    break;\n                }\n            }\n            return result;\n        }\n\n        // components\n        delete components[schemaName];\n        this.system().components(components);\n\n        // behaviors\n        for (behaviorId in behaviors) {\n            behavior = behaviors[behaviorId];\n            if (behavior.component === schemaName) {\n                delete behaviors[behaviorId];\n                this.system().behaviors(behaviors);\n            }\n        }\n\n        // model\n        modelId = _getModelId(schemas[schemaId]._name, models);\n        if (modelId) {\n            delete models[modelId];\n            this.system().models(models);\n        }\n\n        // schema\n        delete schemas[schemaId];\n        this.system().schemas(schemas);\n    \t\n}",
      "useCoreAPI": false,
      "core": false
    },
    "u1d40f1cecf1824d": {
      "_id": "u1d40f1cecf1824d",
      "component": "Designer",
      "state": "createModel",
      "action": "function createModel(schema) { \n  var schemas = this.system().schemas(),\n      models = this.system().models(),\n      components = this.system().components(),\n      name = '',\n      id = '',\n      propName = '',\n      component = null,\n      behavior = null,\n      model = null,\n      oldSchema = null;\n\n  id = this.generateId();\n\n  model = {\n    \"_id\": id,\n    \"_name\": schema._name\n  };\n\n  for (propName in schema) {\n    if (propName.indexOf('_') !== 0) {\n      switch (true) {\n        case schema[propName] === 'property':\n          model[propName] = {\n            \"type\": \"any\",\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": \"\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'link':\n          model[propName] = {\n            \"type\": \"@_Component \",\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": \"\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'method':\n          model[propName] = {\n            \"params\": [{\n                \"name\": \"param\",\n                \"type\": \"any\",\n                \"mandatory\": false,\n                \"default\": null\n              }],\n            \"result\": \"any\"\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'event':\n          model[propName] = {\n            \"params\": [{\n              \"name\": \"param\",\n              \"type\": \"any\",\n              \"mandatory\": false,\n              \"default\": null\n            }]\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        case schema[propName] === 'collection':\n          model[propName] = {\n            \"type\": [\"any\"],\n            \"readOnly\": false,\n            \"mandatory\": false,\n            \"default\": []\n          };\n\n          for (component in components[name]) {\n            components[name][component][propName] = model[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n          }\n\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  models[id] = model;\n\n  this.system().models(models);\n  this.require('channel').$designerCreateModel(model._id, model);\n  this.system().components(components);\n  this.save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "w17c2d14f92104a6": {
      "_id": "w17c2d14f92104a6",
      "component": "Designer",
      "state": "syncComponent",
      "action": "function syncComponent(model, forceDelete) { \n  var components = this.system().components(),\n      name = '',\n      componentId = '',\n      propName = '',\n      modelDef = null,\n      component = null,\n      createModel = false;\n\n  name = model._name;\n\n  schema = this.getGeneratedSchema(name);\n  modelDef = this.getGeneratedModel(name);\n\n  for (propName in schema) {\n    switch (true) {\n      case schema[propName] === 'property':\n          for (component in components[name]) {\n            if (typeof components[name][component][propName] === 'undefined') {\n              components[name][component][propName] = modelDef[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n          }\n          break;\n      case schema[propName] === 'link':\n          for (component in components[name]) {\n            if (typeof components[name][component][propName] === 'undefined') {\n              components[name][component][propName] = modelDef[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n          }\n          break;\n      case schema[propName] === 'collection':\n        for (component in components[name]) {\n          if (typeof components[name][component][propName] === 'undefined') {\n            components[name][component][propName] = modelDef[propName].default;\n            this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n            this.system().components(components);\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (forceDelete) {\n    for (componentId in components[name]) {\n      for (propName in components[name][componentId]) {\n        if (typeof modelDef[propName] === 'undefined' && propName.indexOf('_') !== 0) {\n          delete components[name][componentId][propName];\n          this.require('channel').$designerDeleteComponent(componentId, name);\n          this.system().components(components);\n        }\n      }\n    }\n  }\n\n  this.save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "s1ba3d1ba1b1ce2c": {
      "_id": "s1ba3d1ba1b1ce2c",
      "component": "Designer",
      "state": "syncModel",
      "action": "function syncModel(schema) { \n  var schemas = this.system().schemas(),\n      models = this.system().models(),\n      components = this.system().components(),\n      behaviors = this.system().behaviors(),\n      name = '',\n      id = '',\n      propName = '',\n      component = null,\n      behavior = null,\n      model = null,\n      oldSchema = null,\n      createModel = false;\n\n  name = schema._name;\n\n  // search\n  for (id in models) {\n    if (models[id]._name === schema._name) {\n      model = models[id];\n    }\n  }\n\n  // case of no model\n  if (!model) {\n    createModel = true;\n    model = {\n      \"_id\": this.generateId(),\n      \"_name\": name\n    };\n  }\n\n  // previous schema\n  oldSchema = schemas[schema._id];\n  for (propName in schema) {\n    if ((schema.hasOwnProperty(propName) &&\n        oldSchema &&\n        (typeof oldSchema[propName] === 'undefined' ||\n            oldSchema[propName] !== schema[propName])) ||\n        createModel\n    ) {\n        switch (true) {\n          case schema[propName] === 'property':\n            model[propName] = {\n              \"type\": \"any\",\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": \"\"\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case schema[propName] === 'link':\n            model[propName] = {\n              \"type\": \"@_Component \",\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": \"\"\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case schema[propName] === 'method':\n            if (typeof model[propName] === 'undefined' || (typeof model[propName] !== 'undefined' && typeof model[propName].type !== 'undefined')) {\n              model[propName] = {\n                  \"params\": [{\n                        \"name\": \"param\",\n                        \"type\": \"any\",\n                        \"mandatory\": false,\n                        \"default\": null\n                      }],\n                  \"result\": \"any\"\n              };\n\n              // create behavior\n              this.createBehavior('method', model._name, propName, model[propName]);\n            }\n\n            break;\n          case schema[propName] === 'event':\n            if (typeof model[propName] === 'undefined' || (typeof model[propName] !== 'undefined' && typeof model[propName].type !== 'undefined')) {\n              model[propName] = {\n                \"params\": [{\n                    \"name\": \"param\",\n                    \"type\": \"any\",\n                    \"mandatory\": false,\n                    \"default\": null\n                }]\n              };\n\n              // create behavior\n              this.createBehavior('event', model._name, propName, model[propName]);\n            } else {\n              if (typeof model[propName].result !== 'undefined') {\n                delete model[propName].result;\n              }\n            }\n\n            break;\n          case schema[propName] === 'collection':\n            model[propName] = {\n              \"type\": [\"@_Component \"],\n              \"readOnly\": false,\n              \"mandatory\": false,\n              \"default\": []\n            };\n\n            for (component in components[name]) {\n              components[name][component][propName] = model[propName].default;\n              this.require('channel').$designerUpdateComponent(component, name, components[name][component]);\n              this.system().components(components);\n            }\n\n            break;\n          case propName.indexOf('_') !== 1:\n            if (propName !== '_id' && propName !== '_inherit') {\n              model[propName] = schema[propName];\n            }\n            break;\n          default:\n            break;\n        }\n    }\n  }\n\n  if (oldSchema) {\n    for (propName in oldSchema) {\n      if (propName.indexOf('_') !== 0 && typeof schema[propName] === 'undefined') {\n        delete model[propName];\n\n        for (component in components[name]) {\n          delete components[name][component][propName];\n          this.require('channel').$designerDeleteComponent(component, name);\n          this.system().components(components);\n        }\n        for (behavior in behaviors) {\n          if (model && behaviors[behavior].component === model._name && behaviors[behavior].state === propName) {\n            delete behaviors[behavior];\n            this.require('channel').$designerDeleteBehavior(behavior);\n            this.system().behaviors(behaviors);\n          }\n        }\n      }\n    }\n  }\n\n  models[model._id] = model;\n  this.system().models(models);\n  this.require('channel').$designerUpdateModel(model._id, model);\n  this.save();\n}",
      "useCoreAPI": false,
      "core": false
    },
    "l186b31a6c81a687": {
      "_id": "l186b31a6c81a687",
      "component": "Designer",
      "state": "syncBehavior",
      "action": "function syncBehavior(model) { \n  var behaviors = this.system().behaviors(),\n    schema = null,\n    propName = '',\n    params = '',\n    header = '',\n    def = null,\n    methodDef = null,\n    length = 0,\n    i = 0,\n    behaviorId = '',\n    action = '',\n    behavior = null,\n    that = this;\n\n  function _getSchema(name) {\n    var result = '',\n      id = '';\n\n    for (id in that.system().schemas()) {\n      if (that.system().schemas()[id]._name === name) {\n        result = that.system().schemas()[id];\n        break;\n      }\n    }\n    return result;\n  }\n\n  schema = _getSchema(model._name);\n\n  for (propName in schema) {\n    switch (true) {\n      case schema[propName] === 'method':\n      case schema[propName] === 'event':\n        // params\n        def = model[propName];\n\n        if (typeof model[propName] !== 'object') {\n          if (schema[propName] === 'method') {\n            def = {\n              \"params\": [\n                {\n                  \"name\": \"param\",\n                  \"type\": \"string\",\n                  \"mandatory\": false,\n                  \"default\": \"\"\n                }\n              ],\n              \"result\": \"string\"\n            };\n          } else {\n            def = {\n              \"params\": [\n                {\n                  \"name\": \"param\",\n                  \"type\": \"string\",\n                  \"mandatory\": false,\n                  \"default\": \"\"\n                }\n              ]\n            };\n          }\n        }\n        methodDef = def.params;\n        params = '';\n        if (methodDef && methodDef.length) {\n          length = methodDef.length;\n          for (i = 0; i < length; i++) {\n            if (i === 0) {\n              params = methodDef[i].name;\n            } else {\n              params = params + ', ' + methodDef[i].name;\n            }\n          }\n        }\n\n        header = 'function ' + propName + '(' + params + ') ';\n\n        for (behaviorId in behaviors) {\n          behavior = behaviors[behaviorId];\n          if (behavior.component === model._name && behavior.state === propName) {\n            action = behavior.action.split('{');\n            action[0] = header;\n            behaviors[behaviorId].action = action.join('{');\n            this.system().behaviors(behaviors);\n            this.require('channel').$designerUpdateBehavior(behavior._id, behavior);\n            this.save();\n          }\n        }\n\n        break;\n      default:\n        break;\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    },
    "x196fc166ef17a85": {
      "_id": "x196fc166ef17a85",
      "component": "Designer",
      "state": "linkModel",
      "action": "function linkModel(source, target) { \n  jsPlumb.ready(function () {\n    jsPlumb.setContainer('body');\n\n    jsPlumb.connect({\n      paintStyle: {\n        stroke: '#7F949D',\n        strokeWidth: 3\n      },\n      source: 'designer-model-panel-' + source,\n      target: 'designer-model-panel-' + target,\n      overlays: [\n        ['Arrow', {\n          location: 1\n        }]\n      ]\n    }, {\n        connector: ['Flowchart'],\n        anchor: ['Left', 'Right'],\n        endpoint: 'Blank'\n      });\n  });\n}",
      "useCoreAPI": false,
      "core": false
    },
    "k13951153851cc3a": {
      "_id": "k13951153851cc3a",
      "component": "Designer",
      "state": "save",
      "action": "function save() { \n  var systems = this.require('storage').get('system-designer-systems'),\n    designer = this.require('designer'),\n    system = this.require('db').collections().System.find({\n      '_id': designer.system().id()\n    })[0],\n    systemId = system._id;\n\n  // delete classInfo\n  system = JSON.parse(JSON.stringify(system));\n  delete system.classInfo;\n\n  // save system\n  this.require('storage').set(systemId, system);\n\n  // save index\n  if (!systems) {\n    systems = { 'systems': [systemId] };\n  } else {\n    if (systems.systems.indexOf(systemId) === -1) {\n      systems.systems.push(systemId);\n    }\n  }\n  this.require('storage').set('system-designer-systems', systems);\n}",
      "useCoreAPI": false,
      "core": false
    },
    "g1a8081351511716": {
      "_id": "g1a8081351511716",
      "component": "Designer",
      "state": "messages",
      "action": "function messages(value) { \n  value.forEach(function (message) {\n    console.log(message);\n    $db._Message.insert(message);\n  });\n}",
      "useCoreAPI": true,
      "core": false
    },
    "u1cf0e155fb1e53f": {
      "_id": "u1cf0e155fb1e53f",
      "component": "Workspace",
      "state": "render",
      "action": "function render() { \n  var ModelSystem = null,\n      ModelSchema = null,\n      ModelClass = null,\n      modelSchema = null,\n      ModelLog = null,\n      sys = null,\n      name = '',\n      id = '',\n      schemaId = '',\n      modelclass = null,\n      modellog = null,\n      ModelType = null,\n      type = null,\n      ModelComponent = null,\n      component = null,\n      ModelBehavior = null,\n      behavior = null,\n      system = this.designer().system(),\n      space = this.designer().space(),\n      parentId = '',\n      parentsId = [],\n      parents = null,\n      systems = null,\n      systemIds = [],\n      i = 0,\n      length = 0,\n      title = 0;\n\n  function _getSchemaId(name) {\n    var result = '',\n        id = '';\n\n    for (id in system.schemas()) {\n      if (system.schemas()[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function _getModelId(name) {\n    var result = '',\n        id = '';\n\n    for (id in system.models()) {\n      if (system.models()[id]._name === name) {\n        result = id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  if (system) {\n    this.clear();\n\n    window.scrollTo(0, 0);\n\n    title = 'system ' + system.name();\n    if (title !== document.title) {\n      document.title = title;\n    }\n\n    switch (this.designer().context()) {\n      case 'system':\n        systems = this.require('storage').get('system-designer-systems');\n\n        if (systems) {\n          systemIds = systems.systems;\n        }\n        length = systemIds.length;\n\n        for (i = 0; i < length; i++) {\n          system = this.require('storage').get(systemIds[i]);\n          if (system.name === space) {\n            ModelSystem = this.require('ModelSystem');\n            sys = new ModelSystem({\n              'title': system.name\n            });\n            sys.uuid(system._id);\n            sys.document(JSON.parse(JSON.stringify(system)));\n            sys.content(JSON.stringify(system));\n            sys.render();\n          }\n        }\n\n        if (space === '' && length > 0) {\n          this.require('message').warning('System not found.');\n        }\n\n        break;\n      case 'schemas':\n        if (space) {\n          for (id in system.schemas()) {\n            if (system.schemas()[id]._id === space) {\n              ModelSchema = this.require('ModelSchema');\n\n              // create parent if any\n              parentsId = [];\n              if (system.schemas()[id]._inherit) {\n                parents = system.schemas()[id]._inherit.slice();\n                parents.reverse();\n              }\n              length = 0;\n              if (parents) {\n                length = parents.length;\n              }\n\n              for (i = 0; i < length; i++) {\n                parentId = _getSchemaId(parents[i]);\n\n                modelSchema = new ModelSchema({\n                  'title': parents[i]\n                });\n\n                if (parents[i] === '_Component') {\n                  parentId = \"111df11e2b19fde\";\n\n                  var schemaRuntime = {\n                    \"_id\": \"_Component\",\n                    \"_name\": \"_Component\",\n                    \"_core\": true,\n                    \"classInfo\": \"property\",\n                    \"id\": \"property\",\n                    \"destroy\": \"method\",\n                    \"error\": \"event\",\n                    \"init\": \"method\",\n                    \"off\": \"method\",\n                    \"on\": \"method\",\n                    \"require\": \"method\"\n                  };\n\n                  modelSchema.document(schemaRuntime);\n                  modelSchema.content(JSON.stringify(schemaRuntime));\n                  parentsId.push(parentId);\n                  modelSchema.uuid(parentId);\n                } else {\n                  if (system.schemas()[_getSchemaId(parents[i])]) {\n                    modelSchema.document(JSON.parse(JSON.stringify(system.schemas()[_getSchemaId(parents[i])])));\n                    modelSchema.content(JSON.stringify(system.schemas()[_getSchemaId(parents[i])]));\n                    parentsId.push(_getSchemaId(parents[i]));\n                    modelSchema.uuid(_getSchemaId(parents[i]));\n                  } else {\n                    parentsId.push(parents[i]);\n                    modelSchema.uuid(parents[i]);\n                  }\n                }\n                modelSchema.render();\n              }\n\n              modelSchema = new ModelSchema({\n                'title': system.schemas()[id]._name\n              });\n              modelSchema.uuid(id);\n              modelSchema.document(JSON.parse(JSON.stringify(system.schemas()[id])));\n              modelSchema.content(JSON.stringify(system.schemas()[id]));\n              modelSchema.editable(true);\n              modelSchema.render();\n\n              length = parentsId.length;\n              for (i = 0; i < length; i++) {\n                this.designer().linkModel(id, parentsId[i]);\n              }\n            }\n          }\n        }\n        break;\n      case 'models':\n        if (space) {\n          for (id in system.models()) {\n            if (system.models()[id]._id === space) {\n              ModelClass = this.require('ModelClass');\n\n              // create parent if any\n              // parents are search from the schema\n              schemaId = _getSchemaId(system.models()[id]._name);\n              parentsId = [];\n              if (schemaId && system.schemas()[schemaId]._inherit) {\n                parents = system.schemas()[schemaId]._inherit.slice();\n                parents.reverse();\n              }\n              length = 0;\n              if (parents) {\n                length = parents.length;\n              }\n\n              for (i = 0; i < length; i++) {\n\n                parentId = _getSchemaId(parents[i]);\n\n                modelclass = new ModelClass({\n                  'title': parents[i]\n                });\n\n                if (parents[i] === '_Component') {\n                  parentId = '123751cb591de26';\n\n                  var modelRuntime = {\n                    \"_name\": \"_Component\",\n                    \"_core\": true,\n                    \"classInfo\": {\n                      \"type\": \"@_RuntimeClassInfo\",\n                      \"readOnly\": false,\n                      \"mandatory\": false,\n                      \"default\": {}\n                    },\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"readOnly\": true,\n                      \"mandatory\": false,\n                      \"default\": \"\"\n                    },\n                    \"destroy\": {\n                      \"params\": []\n                    },\n                    \"error\": {\n                      \"params\": [{\n                        \"name\": \"data\",\n                        \"type\": \"errorParam\"\n                      }]\n                    },\n                    \"init\": {\n                        \"params\": [{\n                          \"name\": \"conf\",\n                          \"type\": \"object\"\n                        }]\n                    },\n                    \"off\": {\n                        \"params\": [{\n                          \"name\": \"state\",\n                          \"type\": \"string\"\n                        },\n                        {\n                          \"name\": \"behaviorId\",\n                          \"type\": \"string\",\n                          \"mandatory\": false\n                        }]\n                    },\n                    \"on\": {\n                      \"params\": [{\n                        \"name\": \"state\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"name\": \"handler\",\n                        \"type\": \"function\"\n                      },\n                      {\n                        \"name\": \"useCoreAPI\",\n                        \"type\": \"boolean\",\n                        \"mandatory\": false\n                      },\n                      {\n                        \"name\": \"isCore\",\n                        \"type\": \"boolean\",\n                        \"mandatory\": false\n                      }\n                      ],\n                      \"result\": \"string\"\n                    },\n                    \"require\": {\n                      \"params\": [{\n                        \"name\": \"id\",\n                        \"type\": \"string\"\n                      }],\n                      \"result\": \"_Component\"\n                    }\n                  };\n\n                  modelclass.document(modelRuntime);\n                  modelclass.content(JSON.stringify(modelRuntime));\n                  parentsId.push(parentId);\n                  modelclass.uuid(parentId);\n                } else {\n                  if (system.models()[_getModelId(parents[i])]) {\n                    modelclass.document(JSON.parse(JSON.stringify(system.models()[_getModelId(parents[i])])));\n                    modelclass.content(JSON.stringify(system.models()[_getModelId(parents[i])]));\n                    parentsId.push(_getModelId(parents[i]));\n                    modelclass.uuid(_getModelId(parents[i]));\n                  } else {\n                    parentsId.push(parents[i]);\n                    modelclass.uuid(parentId);\n                  }\n                }\n                modelclass.render();\n              }\n\n              modelclass = new ModelClass({\n                'title': system.models()[id]._name\n              });\n              modelclass.uuid(id);\n              modelclass.document(JSON.parse(JSON.stringify(system.models()[id])));\n              modelclass.content(JSON.stringify(system.models()[id]));\n              modelclass.editable(true);\n              modelclass.render();\n\n              length = parentsId.length;\n              for (i = 0; i < length; i++) {\n                this.designer().linkModel(id, parentsId[i]);\n              }\n            }\n          }\n        }\n        break;\n      case 'types':\n        if (space) {\n          for (name in system.types())\n            if (system.types()[name].name === space) {\n              ModelType = this.require('ModelType');\n              type = new ModelType({\n                'title': name\n              });\n              type.uuid(name);\n              type.document(JSON.parse(JSON.stringify(system.types()[space])));\n              type.content(JSON.stringify(system.types()[space]));\n              type.render();\n            }\n        }\n        break;\n      case 'components':\n        if (space) {\n          if (this.require('designer').state().component()) {\n            name = this.require('designer').state().component();\n            if (system.components()[space][name]) {\n              ModelComponent = this.require('ModelComponent');\n              component = new ModelComponent({\n                'title': name\n              });\n              component.uuid(name);\n              component.model(space);\n              component.document(JSON.parse(JSON.stringify(system.components()[space][name])));\n              component.content(JSON.stringify(system.components()[space][name]));\n              component.render();\n            }\n          } else {\n            for (name in system.components()[space]) {\n              ModelComponent = this.require('ModelComponent');\n              component = new ModelComponent({\n                'title': name\n              });\n              component.uuid(name);\n              component.model(space);\n              component.document(JSON.parse(JSON.stringify(system.components()[space][name])));\n              component.content(JSON.stringify(system.components()[space][name]));\n              component.render();\n            }\n          }\n        }\n        break;\n      case 'behaviors':\n        if (space) {\n          name = this.require('designer').state().component();\n          for (id in system.behaviors()) {\n            if (system.behaviors()[id].component === space) {\n                if ((name && system.behaviors()[id].state === name) || name === '') {\n                  ModelBehavior = this.require('ModelBehavior');\n\n                  behavior = new ModelBehavior({\n                    'uuid': system.behaviors()[id]._id\n                  });\n                  behavior.title(system.behaviors()[id].state);\n                  behavior.document(system.behaviors()[id]);\n                  behavior.content(JSON.parse(JSON.stringify(system.behaviors()[id].action)));\n                  behavior.render();\n                }\n            }\n\n            // system\n            if (space === this.require('designer').system().name()) {\n              if (system.behaviors()[id].component === this.require('designer').system().id()) {\n                ModelBehavior = this.require('ModelBehavior');\n\n                behavior = new ModelBehavior({\n                  'uuid': system.behaviors()[id]._id\n                });\n                behavior.title(system.behaviors()[id].state);\n                behavior.document(system.behaviors()[id]);\n                behavior.content(JSON.parse(JSON.stringify(system.behaviors()[id].action)));\n                behavior.render();\n              }\n            }\n          }\n\n          Prism.highlightAll();\n        }\n        break;\n      case 'logs':\n        ModelLog = this.require('ModelLog');\n\n        modelLog = new ModelLog();\n        modelLog.render();\n\n        break;\n      default:\n        break;\n    }\n    // TODO IMPROVE REFRESH\n    if (this.designer().filter()) {\n      this.designer().filter(this.designer().filter());\n    }\n  } else {\n\n    document.title = 'System Designer';\n\n    systems = this.require('storage').get('system-designer-systems');\n    if (systems && systems.systems && systems.systems.length) {\n      this.require('message').warning('System not found.');\n    }\n  }\n}",
      "useCoreAPI": false,
      "core": false
    }
  },
  "schemas": {
    "a1097d1ea0812005": {
      "_name": "MenuBar",
      "designer": "property",
      "logo": "property",
      "header": "property",
      "items": "collection",
      "actions": "collection",
      "render": "method",
      "clear": "method",
      "_id": "a1097d1ea0812005",
      "_inherit": [
        "_Component"
      ]
    },
    "v194541e0431ce95": {
      "_name": "Spaces",
      "designer": "property",
      "items": "collection",
      "systems": "collection",
      "components": "collection",
      "render": "method",
      "clear": "method",
      "_id": "v194541e0431ce95",
      "_inherit": [
        "_Component"
      ]
    },
    "f1092816b571e03c": {
      "_name": "Workspace",
      "designer": "property",
      "create": "method",
      "load": "method",
      "clear": "method",
      "render": "method",
      "_id": "f1092816b571e03c",
      "_inherit": [
        "_Component"
      ]
    },
    "k1b97018e111d0e3": {
      "_name": "Server",
      "designer": "property",
      "start": "method",
      "_id": "k1b97018e111d0e3",
      "_inherit": [
        "_Component"
      ]
    },
    "o1ead8184af1a83e": {
      "_name": "Designer",
      "_inherit": [
        "_Component"
      ],
      "version": "property",
      "menubar": "property",
      "toolbar": "property",
      "workspace": "property",
      "spaces": "property",
      "context": "property",
      "oldContext": "property",
      "space": "property",
      "server": "property",
      "system": "property",
      "debug": "property",
      "filter": "property",
      "type": "property",
      "store": "property",
      "state": "property",
      "runWindow": "property",
      "debugWindow": "property",
      "updateRouter": "method",
      "syncModel": "method",
      "syncBehavior": "method",
      "syncComponent": "method",
      "createModel": "method",
      "createBehavior": "method",
      "deleteSchema": "method",
      "linkModel": "method",
      "save": "method",
      "saveCordova": "method",
      "saveAs": "method",
      "welcome": "method",
      "generateId": "method",
      "open": "method",
      "render": "event",
      "logs": "collection",
      "isCordova": "method",
      "isElectron": "method",
      "updateCordovaContext": "method",
      "messages": "property",
      "runMessages": "method",
      "lastPage": "property",
      "getGeneratedSchema": "method",
      "getGeneratedModel": "method",
      "mergeBehavior": "method",
      "_id": "o1ead8184af1a83e"
    }
  },
  "models": {
    "y18b1217aaa13456": {
      "_id": "y18b1217aaa13456",
      "_name": "MenuBar",
      "designer": {
        "type": "@Designer",
        "readOnly": true,
        "mandatory": false,
        "default": {}
      },
      "logo": {
        "type": "@MenuLogo",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "header": {
        "type": "@MenuHeader",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "items": {
        "type": [
          "@MenuItem"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "actions": {
        "type": [
          "@MenuAction"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "render": {},
      "clear": {}
    },
    "i15f6718c9d19b10": {
      "_id": "i15f6718c9d19b10",
      "_name": "Spaces",
      "designer": {
        "type": "@Designer",
        "readOnly": true,
        "mandatory": false,
        "default": {}
      },
      "items": {
        "type": [
          "@SpaceItem"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "systems": {
        "type": [
          "@SpaceItem"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "components": {
        "type": [
          "@SpaceItem"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "render": {},
      "clear": {}
    },
    "v1435e1809e10be7": {
      "_id": "v1435e1809e10be7",
      "_name": "Workspace",
      "designer": {
        "type": "@Designer",
        "readOnly": true,
        "mandatory": true,
        "default": {}
      },
      "create": {},
      "load": {},
      "clear": {},
      "render": {}
    },
    "e1ca371b8a41af7b": {
      "_id": "e1ca371b8a41af7b",
      "_name": "Server",
      "designer": {
        "type": "@Designer",
        "readOnly": true,
        "mandatory": true,
        "default": {}
      },
      "start": {}
    },
    "q129be1c61b18285": {
      "_id": "q129be1c61b18285",
      "_name": "Designer",
      "version": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": "2.0.0-alpha.1"
      },
      "menubar": {
        "type": "@MenuBar",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "toolbar": {
        "type": "@ToolBar",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "workspace": {
        "type": "@Workspace",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "spaces": {
        "type": "@Spaces",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "context": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": ""
      },
      "oldContext": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": ""
      },
      "space": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": ""
      },
      "server": {
        "type": "@Server",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "system": {
        "type": "@System",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "debug": {
        "type": "boolean",
        "readOnly": false,
        "mandatory": false,
        "default": false
      },
      "filter": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": ""
      },
      "type": {
        "type": "editorType",
        "readOnly": false,
        "mandatory": false,
        "default": "designer"
      },
      "store": {
        "type": "@Store",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "state": {
        "type": "@DesignerState",
        "readOnly": false,
        "mandatory": false,
        "default": {}
      },
      "runWindow": {
        "type": "object",
        "readOnly": false,
        "mandatory": false,
        "default": null
      },
      "debugWindow": {
        "type": "object",
        "readOnly": false,
        "mandatory": false,
        "default": null
      },
      "updateRouter": {},
      "syncModel": {
        "params": [
          {
            "name": "schema",
            "type": "object",
            "mandatory": false,
            "default": {}
          }
        ]
      },
      "syncBehavior": {
        "params": [
          {
            "name": "model",
            "type": "object",
            "mandatory": false,
            "default": {}
          }
        ]
      },
      "syncComponent": {
        "params": [
          {
            "name": "model",
            "type": "object",
            "mandatory": false,
            "default": {}
          },
          {
            "name": "forceDelete",
            "type": "boolean",
            "mandatory": false,
            "default": true
          }
        ]
      },
      "createModel": {
        "params": [
          {
            "name": "schema",
            "type": "object",
            "mandatory": false,
            "default": {}
          }
        ]
      },
      "createBehavior": {
        "params": [
          {
            "name": "type",
            "type": "string",
            "mandatory": false,
            "default": "method"
          },
          {
            "name": "model",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "state",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "def",
            "type": "object",
            "mandatory": false,
            "default": {}
          }
        ]
      },
      "deleteSchema": {
        "params": [
          {
            "name": "schemaId",
            "type": "string",
            "mandatory": false,
            "default": ""
          }
        ]
      },
      "linkModel": {
        "params": [
          {
            "name": "source",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "target",
            "type": "string",
            "mandatory": false,
            "default": ""
          }
        ]
      },
      "save": {},
      "saveCordova": {},
      "saveAs": {
        "params": [
          {
            "name": "data",
            "type": "object",
            "mandatory": false,
            "default": {}
          },
          {
            "name": "fileName",
            "type": "string",
            "mandatory": false,
            "default": ""
          }
        ]
      },
      "welcome": {},
      "generateId": {
        "result": "string"
      },
      "open": {
        "params": [
          {
            "name": "url",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "target",
            "type": "string",
            "mandatory": false,
            "default": ""
          },
          {
            "name": "isExt",
            "type": "boolean",
            "mandatory": false,
            "default": false
          }
        ]
      },
      "render": {},
      "logs": {
        "type": [
          "@Log"
        ],
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "isCordova": {
        "result": "boolean"
      },
      "isElectron": {
        "result": "boolean"
      },
      "updateCordovaContext": {},
      "messages": {
        "type": "array",
        "readOnly": false,
        "mandatory": false,
        "default": []
      },
      "runMessages": {
        "params": [
          {
            "name": "messages",
            "type": "array",
            "mandatory": true,
            "default": []
          }
        ]
      },
      "lastPage": {
        "type": "string",
        "readOnly": false,
        "mandatory": false,
        "default": "index.html"
      },
      "getGeneratedSchema": {
        "params": [
          {
            "name": "schema",
            "type": "string",
            "mandatory": true,
            "default": ""
          }
        ],
        "result": "object"
      },
      "getGeneratedModel": {
        "params": [
          {
            "name": "model",
            "type": "string",
            "mandatory": true,
            "default": ""
          }
        ],
        "result": "object"
      },
      "mergeBehavior": {
        "params": [
          {
            "name": "behaviors",
            "type": "object",
            "mandatory": true,
            "default": {}
          },
          {
            "name": "behavior",
            "type": "object",
            "mandatory": true,
            "default": {}
          },
          {
            "name": "sysId",
            "type": "string",
            "mandatory": true,
            "default": ""
          },
          {
            "name": "systemName",
            "type": "string",
            "mandatory": true,
            "default": ""
          }
        ]
      }
    }
  },
  "types": {},
  "master": true,
  "subsystem": false
}