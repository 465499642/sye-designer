{"name":"REST-Server","master":true,"subsystem":false,"version":"1.0.0","description":"Create a REST server\n\n1. Create a schema, example 'Book', make it inherit from 'SyncComponent', add properties\n2. Create Book components\n3. Run the application\n4. Now you can send GET/POST/PUT/DELETE/PATCH requests to http://127.0.0.1:8080/rest/Book\n\nnote: because the running application and System Designer are synchronized, if you open the Components tab when performing the requests, you will see directly the modification on the panel (i.e. if you delete a component with a DELETE request, it will be removed from System Designer)","schemas":{"192b31826d11d82":{"_id":"192b31826d11d82","_name":"RestServer","_inherit":["RuntimeComponent"],"ip":"property","port":"property","apiName":"property","fileStorageEnabled":"property","pushEnabled":"property","start":"method"},"l1bedc1ea351ce82":{"_id":"l1bedc1ea351ce82","_name":"FileStorage","_inherit":["RuntimeComponent"],"load":"method","save":"method","status":"property"},"1723516a30132ac":{"_id":"1723516a30132ac","_name":"RuntimeDatabase","_inherit":["RuntimeComponent"],"_core":true,"insert":"event","update":"event","remove":"event"},"104ad1f48518376":{"_id":"104ad1f48518376","_name":"RuntimeChannel","_inherit":["RuntimeComponent"],"send":"event","serverDatabaseInsert":"event","serverDatabaseRemove":"event","serverDatabaseUpdate":"event","clientDatabaseFind":"event","clientDatabaseInsert":"event","clientDatabaseRemove":"event","clientDatabaseUpdate":"event","externalGet":"event","externalPost":"event","externalPatch":"event","externalDelete":"event","externalPut":"event"},"q18f7416d3918b0a":{"_id":"q18f7416d3918b0a","_name":"RequestHandler","_core":true,"_inherit":["RuntimeComponent"],"request":"property","response":"property","context":"method","parameters":"method","get":"method","del":"method","post":"method","patch":"method","put":"method"},"e1698818d021506b":{"_id":"e1698818d021506b","_name":"StreamHandler","_inherit":["RequestHandler"],"stream":"method"},"s19cc211d1b176b0":{"_id":"s19cc211d1b176b0","_name":"SyncComponent","_inherit":["RuntimeComponent"]},"n1d07014f311fba3":{"_id":"n1d07014f311fba3","_name":"PageRequestHandler","_inherit":["RequestHandler"],"sendPage":"method"}},"models":{"1219d183a917281":{"_id":"1219d183a917281","_name":"RestServer","start":{},"ip":{"type":"string","readOnly":false,"mandatory":false,"default":"127.0.0.1"},"port":{"type":"string","readOnly":false,"mandatory":false,"default":"8080"},"apiName":{"type":"string","readOnly":false,"mandatory":false,"default":"/rest"},"_core":true,"pushEnabled":{"type":"boolean","readOnly":false,"mandatory":false,"default":true},"fileStorageEnabled":{"type":"boolean","readOnly":false,"mandatory":false,"default":false}},"s10b3e102bb19d1f":{"_id":"s10b3e102bb19d1f","_name":"FileStorage","load":{},"save":{},"status":{"type":"fileStatus","readOnly":false,"mandatory":false,"default":"unloaded"}},"q146a11f3a417b17":{"_id":"q146a11f3a417b17","_name":"RuntimeDatabase","_core":true,"insert":{"params":[{"name":"event","type":"dbInsertEvent"}]},"update":{"params":[{"name":"event","type":"dbUpdateEvent"}]},"remove":{"params":[{"name":"event","type":"dbRemoveEvent"}]}},"u1427b16ae11ce88":{"_id":"u1427b16ae11ce88","_name":"RuntimeChannel","send":{"params":[{"name":"message","type":"message"}]},"serverDatabaseInsert":{"params":[{"name":"dbInsertEvent","type":"any","mandatory":false,"default":{}}]},"serverDatabaseRemove":{"params":[{"name":"dbRemoveEvent","type":"any","mandatory":false,"default":{}}]},"serverDatabaseUpdate":{"params":[{"name":"dbUpdateEvent","type":"any","mandatory":false,"default":{}}]},"clientDatabaseFind":{"params":[{"name":"event","type":"dbFindEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"clientDatabaseInsert":{"params":[{"name":"event","type":"dbInsertEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"clientDatabaseRemove":{"params":[{"name":"event","type":"dbRemoveEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"clientDatabaseUpdate":{"params":[{"name":"event","type":"dbUpdateEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"externalPost":{"params":[{"name":"event","type":"dbInsertEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"externalPatch":{"params":[{"name":"event","type":"dbUpdateEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"externalGet":{"params":[{"name":"event","type":"dbFindEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"externalDelete":{"params":[{"name":"event","type":"dbRemoveEvent","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]},"externalPut":{"params":[{"name":"event","type":"putRequest","mandatory":false,"default":{}},{"name":"requestHandlerId","type":"string","mandatory":false,"default":""}]}},"h1c8051340d1c272":{"_id":"h1c8051340d1c272","_name":"RequestHandler","request":{"type":"object","readOnly":false,"mandatory":false,"default":{}},"response":{"type":"object","readOnly":false,"mandatory":false,"default":{}},"context":{"result":"object"},"_core":true,"parameters":{"result":"object"},"get":{},"del":{},"post":{},"patch":{},"put":{}},"c14af31e10a1e0d3":{"_id":"c14af31e10a1e0d3","_name":"StreamHandler","stream":{}},"b165bb1218018306":{"_id":"b165bb1218018306","_name":"SyncComponent"},"h1a86a1501411405":{"_id":"h1a86a1501411405","_name":"PageRequestHandler","sendPage":{"params":[{"name":"url","type":"string","mandatory":false,"default":""}]}}},"behaviors":{"16bb01bab613f08":{"_id":"16bb01bab613f08","component":"134f61c924166c0","state":"start","action":"function start() { \n  if (this.require('restServer').fileStorageEnabled()) {\n    this.require('fileStorage').load();\n  }\n  this.require('restServer').start();\n}","useCoreAPI":false,"core":false},"114291aef21b5b0":{"_id":"114291aef21b5b0","component":"RestServer","state":"start","action":"function start() {\n  var http = global.require('http');\n\n  // Create server\n  http.createServer(function (req, res) {\n    var RequestHandler = this.require('RequestHandler'),\n        StreamHandler = this.require('StreamHandler'),\n        PageRequestHandler = this.require('PageRequestHandler'),\n        requestHandler = null,\n        streamHandler = null,\n        pageRequestHandler = null,\n        page = null;\n  \n    switch (req.method) {\n      case 'GET':\n        switch (true) {\n          case this.pushEnabled() && req.url === '/stream':\n            streamHandler = new StreamHandler({\n              request: req,\n              response: res\n            });\n            streamHandler.stream();\n            break;\n          case req.url.indexOf('.html') !== -1:\n            pageRequestHandler = new PageRequestHandler({\n              request: req,\n              response: res\n            });\n            pageRequestHandler.sendPage(req.url);\n            break;\n          case req.url.indexOf('.html') === -1 && !this.pushEnabled():\n            requestHandler = new RequestHandler({\n              request: req,\n              response: res\n            });\n            requestHandler.get();\n            break;\n          default:\n            break;\n        }\n        break;\n      case 'DELETE':\n        requestHandler = new RequestHandler({\n          request: req,\n          response: res\n        });\n        requestHandler.del();\n        break;\n      case 'POST':\n        requestHandler = new RequestHandler({\n          request: req,\n          response: res\n        });\n        requestHandler.post();\n        break;\n      case 'PUT':\n        requestHandler = new RequestHandler({\n          request: req,\n          response: res\n        });\n        requestHandler.put();\n        break;\n      case 'PATCH':\n        requestHandler = new RequestHandler({\n          request: req,\n          response: res\n        });\n        requestHandler.patch();\n        break;\n      default:\n        break;\n    }\n  }.bind(this)).listen(this.require('restServer').port(), this.require('restServer').ip());\n\n  this.require('logger').info('The server is started on http://' + this.require('restServer').ip() + ':' + this.require('restServer').port());\n}","useCoreAPI":false,"core":false},"f1ddff1b17a19c96":{"_id":"f1ddff1b17a19c96","component":"FileStorage","state":"load","action":"function load() { \n  var fs = global.require('fs'),\n      logger = this.require('logger'),\n      collection = '',\n      id = '';\n      \n  fs.readFile(global.process.env.PWD + '/datastore.json', 'UTF-8', function (err, dataStore) {\n    if (err) {\n      fs.writeFile(global.process.env.PWD + '/datastore.json', '{}', 'UTF-8', function (err) {\n        if (err) {\n          logger.error(err);\n          return;\n        }\n        this.status('loaded');\n      }.bind(this));\n      return;\n    }\n    dataStore = JSON.parse(dataStore);\n    \n    for (collection in dataStore) {\n      for (id in dataStore[collection]) {\n        $db[collection].insert(dataStore[collection][id]);\n      }\n    }\n    this.status('loaded');\n  }.bind(this));\n}","useCoreAPI":true,"core":false},"k1a6881c6b01e571":{"_id":"k1a6881c6b01e571","component":"FileStorage","state":"save","action":"function save() { \n\tvar collections = this.require('db').collections(),\n\t    components = [],\n\t    store = {},\n\t    collection = '',\n\t    fs = global.require('fs'),\n\t    logger = this.require('logger');\n\t    \n\tfor (collection in collections) {\n\t  if ($metamodel.inheritFrom(collection, 'SyncComponent')) {\n\t    store[collection] = {};\n\t    \n\t    components = collections[collection].find();\n\t    components.forEach(function (component) {\n\t      store[collection][component._id] = component;\n\t    });\n\t  }\n\t}    \n\t    \n  if (this.status() === 'loaded') {\n    fs.writeFile(global.process.env.PWD + '/datastore.json', JSON.stringify(store), 'UTF-8', function (err) {\n      if (err) {\n        logger.error(err);\n        return;\n      }\n    });    \n  }\n}","useCoreAPI":true,"core":false},"1de8c154bb18a01":{"_id":"1de8c154bb18a01","component":"RuntimeDatabase","state":"insert","action":"function insert(event) { \n  var logs = [],\n      lastInsertOrder = '';\n      \n  if ($metamodel.inheritFrom(event.collection,'SyncComponent')) {    \n    if (this.require('restServer').fileStorageEnabled()) {\n      this.require('fileStorage').save();\n    }\n\n    if (this.require('db').collections().StreamHandler.count() > 0) {\n      // search if last insert action before this one \n      // was a message from the server or not\n      logs = $db.RuntimeLog.find({\n        'action': 'insert',\n        'id': event.document._id\n      });\n     \n      logs.sort(function sort(logA, logB) {\n        return logA.order - logB.order;\n      });\n      lastInsertOrder = logs[0].order;\n      \n      logs = $db.RuntimeLog.find({\n        'order': lastInsertOrder - 1,\n        'collection': 'RuntimeMessage'\n      });\n      \n      switch (true) {\n        case !logs[0]:\n        case logs[0] && \n             logs[0].value.event !== 'clientDatabaseInsert':\n        case logs[0] && logs[0].value.event === 'clientDatabaseInsert' && \n             logs[0].value.data[0].document._id !== event.document._id:\n            this.require('channel').serverDatabaseInsert(event);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}","useCoreAPI":true,"core":false},"173ff13cde1c29e":{"_id":"173ff13cde1c29e","component":"RuntimeDatabase","state":"remove","action":"function remove(event) { \n  var logs = [],\n      lastInsertOrder = '';\n      \n  if ($metamodel.inheritFrom(event.collection,'SyncComponent')) {\n    if (this.require('restServer').fileStorageEnabled()) {\n      this.require('fileStorage').save();\n    }\n  \n    if (this.require('db').collections().StreamHandler.count() > 0) {\n      // search if last remove action before this one \n      // was a message from the server or not\n      logs = $db.RuntimeLog.find({\n        'action': 'insert',\n        'id': event.document._id\n      });\n      \n      logs.sort(function sort(logA, logB) {\n        return logA.order - logB.order;\n      });\n      lastInsertOrder = logs[0].order;\n      \n      logs = $db.RuntimeLog.find({\n        'order': lastInsertOrder - 1,\n        'collection': 'RuntimeMessage'\n      });\n      \n      switch (true) {\n        case !logs[0]:\n        case logs[0] && \n             logs[0].value.event !== 'clientDatabaseRemove':\n        case logs[0] && logs[0].value.event === 'clientDatabaseRemove' && \n             logs[0].value.data[0].collection !== event.collection &&\n             logs[0].value.data[0].id !== event.id:\n          this.require('channel').serverDatabaseRemove(event);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}","useCoreAPI":true,"core":false},"1e0a71b78c1fd0e":{"_id":"1e0a71b78c1fd0e","component":"RuntimeDatabase","state":"update","action":"function update(event) { \n  var logs = [],\n      lastInsertOrder = '';\n      \n  if ($metamodel.inheritFrom(event.collection,'SyncComponent')) {\n    if (this.require('restServer').fileStorageEnabled()) {\n      this.require('fileStorage').save();\n    }\n  \n    if (this.require('db').collections().StreamHandler.count() > 0) {\n      // search if last insert action before this one \n      // was a message from the server or not\n      logs = $db.RuntimeLog.find({\n        'action': 'udpdate',\n        'id': event.document._id\n      });\n      \n      logs.sort(function sort(logA, logB) {\n        return logA.order - logB.order;\n      });\n      lastInsertOrder = logs[0].order;\n      \n      logs = $db.RuntimeLog.find({\n        'order': lastInsertOrder - 1,\n        'collection': 'RuntimeMessage'\n      });\n      \n      switch (true) {\n        case !logs[0]:\n        case logs[0] && \n             logs[0].value.event !== 'clientDatabaseUpdate':\n        case logs[0] && logs[0].value.event === 'clientDatabaseUpdate' && \n             logs[0].value.data[0].id !== event.id && \n             logs[0].value.data[0].field !== event.field &&\n             logs[0].value.data[0].value !== event.value:\n          this.require('channel').serverDatabaseUpdate(event);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}","useCoreAPI":true,"core":false},"n173ca1b0e81fcb0":{"_id":"n173ca1b0e81fcb0","component":"FileStorage","state":"status","action":"function status(value) { \n  if (value === 'loaded') {\n    this.require('logger').info('datastore.json file is loaded.');\n  }\t\n}","useCoreAPI":false,"core":false},"1ae8e11ece1a658":{"_id":"1ae8e11ece1a658","component":"RuntimeChannel","state":"send","action":"function send(message) { \n  var streamsHandlers = [],\n    strMessage = '';\n    \n  try {\n    strMessage = JSON.stringify(message);\n  } catch(e) {\n  }\n  \n  if (strMessage !== '') {\n    streamsHandlers = this.require('db').collections().StreamHandler.find();\n    streamsHandlers.forEach(function (streamHandler) {\n      this.require(streamHandler._id).response().write('event:' + message.event + '\\n');\n      this.require(streamHandler._id).response().write('data:' + strMessage + '\\n\\n');\n    }.bind(this));\n  }\n}","useCoreAPI":false,"core":false},"u14f2c180cd1d8bd":{"_id":"u14f2c180cd1d8bd","component":"RuntimeChannel","state":"clientDatabaseFind","action":"function clientDatabaseFind(event, requestHandlerId) { \n  var search = [],\n    result = '',\n    requestHandler = null;\n\n  // find document(s)\n  if (event.collection && $db[event.collection]) {\n    if (event.id) {\n      search = $db[event.collection].find({\n        '_id': event.id\n      });\n\n      if (search.length) {\n        search = search[0];\n        if (event.property) { // get a component property\n          search = JSON.parse(JSON.stringify(search));\n          result = search[event.property];\n        } else { // get a component\n          search = JSON.parse(JSON.stringify(search));\n          delete search.classInfo;\n          result = search;\n        }\n      } else {\n        result = '';\n        this.require('logger').warn('There is no document with _id ' + '\\'' + event.id + '\\’ (for the collection \\'' + event.collection + '\\')');\n      }\n    } else { // get a collection\n      result = [];\n\n      search = $db[event.collection].find();\n      search.forEach(function (val) {\n        var doc = val;\n\n        doc = JSON.parse(JSON.stringify(doc));\n        delete doc.classInfo;\n\n        result.push(doc);\n      });\n    }\n  }\n    \n  // response  \n    \n  requestHandler = this.require(requestHandlerId);\n  requestHandler.response().writeHead(200, { \n    'Content-Type': 'application/json', \n    'Access-Control-Allow-Origin': '*' \n  });\n  \n  if (result === '') {\n    requestHandler.response().end('');\n  } else {\n    requestHandler.response().end(JSON.stringify(result));\n  }\n}","useCoreAPI":true,"core":false},"u11fb61661d154e0":{"_id":"u11fb61661d154e0","component":"RequestHandler","state":"context","action":"function context() { \n  var context = {},\n      collection ='',\n      id = '',\n      property = '',\n      url = '' ,\n      path = [],\n      i = 0,\n      length = 0,\n      apiName = this.require('restServer').apiName();\n    \n  url = this.request().url;  \n     \n  if (url.indexOf('favicon.ico') === -1) {  \n    if (apiName === '') {\n      context.valid = false;\n      this.require('logger').warn('REST server needs an API name');\n    } else {\n      apiName = apiName + '/';\n      apiName = apiName.replace('//', '/');\n    \n      if (url.indexOf(apiName) !== -1) {\n        path = url.replace(apiName, '').split('/');\n        length = path.length;\n        \n        for (i = 0; i < length; i++) {\n          if (i === 0) {\n            collection = path[i].split('?')[0];\n          }\n          if (i === 1) {\n            id = path[i].split('?')[0];\n          }\n          if (i === 2) {\n            property = path[i].split('?')[0];\n          }\n        }\n      }\n    }\n  }\n  \n  switch (this.request().method) {\n    case 'GET':\n      context.collection = collection;\n      context.id = id;\n      context.property = property;\n      break;\n    case 'DELETE':\n      context.collection = collection;\n      context.id = id;\n      break;\n    case 'POST':\n      context.collection = collection;\n      context.document = {};\n      break;\n    case 'PATCH':\n      context.collection = collection;\n      context.id = id;\n      break;\n    case 'PUT':\n      context.collection = collection;\n      context.id = id;\n      break;\n    default:\n      break;\n  }\n  \n  return context;\n}","useCoreAPI":false,"core":false},"q1fd171f1a5179a4":{"_id":"q1fd171f1a5179a4","component":"RuntimeChannel","state":"clientDatabaseInsert","action":"function clientDatabaseInsert(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId),\n      doc = null,\n      tabid = [];\n\n  if (event.collection && $db[event.collection] ) {\n    tabid = $db[event.collection].insert(event.document);\n    doc = $db[event.collection].find({\n      '_id': tabid[0]\n    })[0];\n    doc = JSON.parse(JSON.stringify(doc));\n    delete doc.classInfo;\n\n    requestHandler.response().writeHead(201, { \n      'Content-Type': 'application/json', \n      'Access-Control-Allow-Origin': '*' \n    });\n    requestHandler.response().end(JSON.stringify(doc));\n  } else {\n    requestHandler.response().writeHead(200, { \n      'Content-Type': 'application/json', \n      'Access-Control-Allow-Origin': '*'\n    });\n    requestHandler.response().end('');\n  }\t\n}","useCoreAPI":true,"core":false},"j14a501a1c91da9e":{"_id":"j14a501a1c91da9e","component":"RequestHandler","state":"parameters","action":"function parameters() { \n if (url.indexOf('?') !== -1) {\n          params = url.split('?')[1];\n          params = params.split('&');\n          \n          params.forEach(function (val) {\n            var paramName = '',\n                paramValue = '',\n                clean = '';\n   \n            if (val.indexOf('=') !== -1) {\n              paramName = val.split('=')[0];\n              paramValue = decodeURIComponent(val.split('=')[1]);\n            }\n            \n            context.parameters[paramName] = paramValue;\n          });\n  }\n}","useCoreAPI":false,"core":false},"s18bcd12d8d138eb":{"_id":"s18bcd12d8d138eb","component":"RequestHandler","state":"get","action":"function get() {\n  this.require('runtime').message({\n    'event': this.request().headers['x-system-event'] || 'externalGet',\n    'from': this.request().headers['x-system-id'] || '',\n    'data': [this.context(), this.id()]\n  });\n}","useCoreAPI":false,"core":false},"a14f5d1c8bb17a91":{"_id":"a14f5d1c8bb17a91","component":"RuntimeChannel","state":"clientDatabaseRemove","action":"function clientDatabaseRemove(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId);\n  \n  // delete compononent(s)\n  if (event.collection && $db[event.collection]) {\n    if (event.id) {\n      $db[event.collection].remove({\n        '_id': event.id\n      });\n    } else {\n      $db[event.collection].remove();\n    }\n  }\n  \n  // response\n  requestHandler.response().writeHead(200, { \n    'Content-Type': 'application/json', \n    'Access-Control-Allow-Origin': '*'\n  });\n  requestHandler.response().end('');\n}","useCoreAPI":true,"core":false},"e1631d172b613353":{"_id":"e1631d172b613353","component":"RequestHandler","state":"del","action":"function del() { \n  this.require('runtime').message({\n    'event': this.request().headers['x-system-event'] || 'externalDelete',\n    'from': this.request().headers['x-system-id'] || '',\n    'data': [this.context(), this.id()]\n  });\n}","useCoreAPI":false,"core":false},"b17431138cd1fa23":{"_id":"b17431138cd1fa23","component":"RequestHandler","state":"post","action":"function post() { \n  var body = '',\n      qs = global.require('querystring');\n\n  this.request().on('data', function data(data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      this.request().connection.destroy();\n    }\n  }.bind(this));\n\n  this.request().on('end', function end() {\n    var post = qs.parse(body),\n        context = this.context(),\n        doc = {};\n\n    if (Object.keys(post).length) {\n      doc = JSON.parse(decodeURIComponent(Object.keys(post)[0]));\n    }\n    \n    context.document = doc;\n   \n    this.require('runtime').message({\n      'event': this.request().headers['x-system-event'] || 'externalPost',\n      'from': this.request().headers['x-system-id'] || '',\n      'data': [context, this.id()]\n    });\n  }.bind(this));\n}","useCoreAPI":false,"core":false},"g1c8bb107d91ca96":{"_id":"g1c8bb107d91ca96","component":"RequestHandler","state":"patch","action":"function patch() { \n  var body = '',\n      qs = global.require('querystring');\n\n  this.request().on('data', function data(data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      this.request().connection.destroy();\n    }\n  }.bind(this));\n\n  this.request().on('end', function end() {\n    var post = qs.parse(body),\n        context = this.context(),\n        patch = {};\n\n    if (Object.keys(post).length) {\n      patch = JSON.parse(decodeURIComponent(Object.keys(post)[0]));\n    }\n    \n    context.field = Object.keys(patch)[0];\n    context.value = patch[Object.keys(patch)[0]];\n    \n    this.require('runtime').message({\n      'event': this.request().headers['x-system-event'] || 'externalPatch',\n      'from': this.request().headers['x-system-id'] || '',\n      'data': [context, this.id()]\n    });\n  }.bind(this));\n}","useCoreAPI":false,"core":false},"j1d4bc174cf18613":{"_id":"j1d4bc174cf18613","component":"RuntimeChannel","state":"clientDatabaseUpdate","action":"function clientDatabaseUpdate(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId),\n      update = {};\n  \n  if (event.collection && $db[event.collection] && event.id) {\n    update[event.field] = event.value;\n    $db[event.collection].update({\n      '_id': event.id\n    }, update);\n    \n    doc = $db[event.collection].find({\n      '_id': event.id\n    })[0];\n    doc = JSON.parse(JSON.stringify(doc));\n    delete doc.classInfo;\n    \n    requestHandler.response().end(JSON.stringify(doc));\n  } else {\n    requestHandler.response().end('');\n  }\t\n}","useCoreAPI":true,"core":false},"s1c7da1ff4217270":{"_id":"s1c7da1ff4217270","component":"RequestHandler","state":"put","action":"function put() { \n   var body = '',\n      qs = global.require('querystring');\n\n  this.request().on('data', function data(data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      this.request().connection.destroy();\n    }\n  }.bind(this));\n\n  this.request().on('end', function end() {\n    var doc = qs.parse(body),\n        context = this.context();\n    \n    context.document = doc;\n    \n    this.require('runtime').message({\n      'event': this.request().headers['x-system-event'] || 'externalPut',\n      'from': this.request().headers['x-system-id'] || '',\n      'data': [context, this.id()]\n    });\n  }.bind(this));\n}","useCoreAPI":false,"core":false},"r14f8f12b9913289":{"_id":"r14f8f12b9913289","component":"StreamHandler","state":"stream","action":"function stream() { \n  this.response().writeHead(200, {\n    'Content-Type': 'text/event-stream', \n    'Cache-Control': 'no-cache', \n    'Connection': 'keep-alive'\n  });\n}","useCoreAPI":false,"core":false},"y137ee15e6717a6b":{"_id":"y137ee15e6717a6b","component":"RuntimeChannel","state":"externalPost","action":"function externalPost(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId),\n      doc = null,\n      tabid = [];\n\n  if (event.collection && $db[event.collection] ) {\n    tabid = $db[event.collection].insert(event.document);\n    doc = $db[event.collection].find({\n      '_id': tabid[0]\n    })[0];\n    doc = JSON.parse(JSON.stringify(doc));\n    delete doc.classInfo;\n\n    requestHandler.response().writeHead(201, { \n      'Content-Type': 'application/json', \n      'Access-Control-Allow-Origin': '*' \n    });\n    requestHandler.response().end(JSON.stringify(doc));\n  } else {\n    requestHandler.response().writeHead(200, { \n      'Content-Type': 'application/json', \n      'Access-Control-Allow-Origin': '*'\n    });\n    requestHandler.response().end('');\n  }\t\n}","useCoreAPI":true,"core":false},"q1f7f1141a41ef3b":{"_id":"q1f7f1141a41ef3b","component":"RuntimeChannel","state":"externalPatch","action":"function externalPatch(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId),\n      update = {};\n  \n  if (event.collection && $db[event.collection] && event.id) {\n    update[event.field] = event.value;\n    $db[event.collection].update({\n      '_id': event.id\n    }, update);\n    \n    doc = $db[event.collection].find({\n      '_id': event.id\n    })[0];\n    doc = JSON.parse(JSON.stringify(doc));\n    delete doc.classInfo;\n    \n    requestHandler.response().end(JSON.stringify(doc));\n  } else {\n    requestHandler.response().end('');\n  }\t\t\n}","useCoreAPI":true,"core":false},"b12cc710da219872":{"_id":"b12cc710da219872","component":"RuntimeChannel","state":"externalGet","action":"function externalGet(event, requestHandlerId) { \n  var search = [],\n    result = '',\n    requestHandler = null;\n\n  // find document(s)\n  if (event.collection && $db[event.collection]) {\n    if (event.id) {\n      search = $db[event.collection].find({\n        '_id': event.id\n      });\n\n      if (search.length) {\n        search = search[0];\n        if (event.property) { // get a component property\n          search = JSON.parse(JSON.stringify(search));\n          result = search[event.property];\n        } else { // get a component\n          search = JSON.parse(JSON.stringify(search));\n          delete search.classInfo;\n          result = search;\n        }\n      } else {\n        result = '';\n        this.require('logger').warn('There is no document with _id ' + '\\'' + event.id + '\\’ (for the collection \\'' + event.collection + '\\')');\n      }\n    } else { // get a collection\n      result = [];\n\n      search = $db[event.collection].find();\n      search.forEach(function (val) {\n        var doc = val;\n\n        doc = JSON.parse(JSON.stringify(doc));\n        delete doc.classInfo;\n\n        result.push(doc);\n      });\n    }\n  }\n    \n  // response  \n    \n  requestHandler = this.require(requestHandlerId);\n  requestHandler.response().writeHead(200, { \n    'Content-Type': 'application/json', \n    'Access-Control-Allow-Origin': '*' \n  });\n  \n  if (result === '') {\n    requestHandler.response().end('');\n  } else {\n    requestHandler.response().end(JSON.stringify(result));\n  }\t\n}","useCoreAPI":true,"core":false},"w12a1e1723b12eda":{"_id":"w12a1e1723b12eda","component":"RuntimeChannel","state":"externalDelete","action":"function externalDelete(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId);\n  \n  // delete compononent(s)\n  if (event.collection && $db[event.collection]) {\n    if (event.id) {\n      $db[event.collection].remove({\n        '_id': event.id\n      });\n    } else {\n      $db[event.collection].remove();\n    }\n  }\n  \n  // response\n  requestHandler.response().writeHead(200, { \n    'Content-Type': 'application/json', \n    'Access-Control-Allow-Origin': '*'\n  });\n  requestHandler.response().end('');\t\n}","useCoreAPI":false,"core":false},"w1786916bfb1f226":{"_id":"w1786916bfb1f226","component":"RuntimeChannel","state":"externalPut","action":"function externalPut(event, requestHandlerId) { \n  var requestHandler = this.require(requestHandlerId),\n      doc = '';\n  \n  if (event.collection && $db[event.collection] && event.id) {\n    search = $db[event.collection].find({\n      '_id': event.id\n    });\n\n    if (search.length) { // update\n\n      $db[event.collection].update({\n        '_id': event.id\n      }, event.document);\n\n      doc = $db[event.collection].find({\n        '_id': event.id\n      })[0];\n      doc = JSON.parse(JSON.stringify(doc));\n      delete doc.classInfo;\n\n      res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n      res.end(JSON.stringify(doc));\n    } else { // create\n\n      comp._id = event.id;\n\n      $db[event.collection].insert(event.document);\n\n      doc = $db[event.collection].find({\n        '_id': event.id\n      })[0];\n      doc = JSON.parse(JSON.stringify(doc));\n      delete doc.classInfo;\n\n      requestHandler.response().writeHead(201, { \n        'Content-Type': 'application/json', \n        'Access-Control-Allow-Origin': '*' \n      });\n      requestHandler.response().end(JSON.stringify(doc));\n    }\n  } else {\n    requestHandler.response().writeHead(200, { \n      'Content-Type': 'application/json', \n      'Access-Control-Allow-Origin': '*' \n    });\n    requestHandler.response().end('');\n  }\t\n}","useCoreAPI":false,"core":false},"k1c9ab1bca112742":{"_id":"k1c9ab1bca112742","component":"PageRequestHandler","state":"sendPage","action":"function sendPage(url) { \n  var fs = global.require('fs'),\n      logger = this.require('logger');\n\n  fs.exists('.' + url, function exists(exists) {\n    if (exists) {\n      fs.readFile('.' + url, function readFile(error, content) {\n        if (error) {\n          logger.error(error); \n          this.response().writeHead(500);\n          res.end();\n        } else {\n          this.response().writeHead(200, {\n            'Content-Type': 'text/html'\n          });\n          this.response().end(content, 'utf-8');\n        }\n      }.bind(this));\n    } else {\n      this.response().writeHead(404);\n      this.response().end();\n    }\n  }.bind(this));\n}","useCoreAPI":false,"core":false}},"types":{"dbUpdateEvent":{"_id":"1f5c41309711752","name":"dbUpdateEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"id":{"type":"string","mandatory":true,"default":""},"field":{"type":"string","mandatory":true,"default":""},"value":{"type":"any","mandatory":true,"default":null}}},"dbRemoveEvent":{"_id":"1952e1ac4213f4a","name":"dbRemoveEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"id":{"type":"string","mandatory":true,"default":""}}},"dbInsertEvent":{"_id":"148ef1e19810e6d","name":"dbInsertEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"document":{"type":"object","mandatory":true,"default":{}}}},"fileStatus":{"_id":"k12bf518aec1008c","name":"fileStatus","type":"any","value":["unloaded","loaded"]},"message":{"name":"message","type":"object","schema":{"event":{"type":"string","mandatory":true},"from":{"type":"string","mandatory":false},"data":{"type":"object","mandatory":true}},"core":true},"Response":{"_id":"r11f2f117101acde","name":"Response","type":"object"},"dbFindEvent":{"_id":"v1d97c110761e033","name":"dbFindEvent","type":"object","schema":{"collection":{"type":"string","mandatory":false,"default":""},"id":{"type":"string","mandatory":false,"default":""},"property":{"type":"string","mandatory":false,"default":""}}},"putRequest":{"_id":"d113031718f19934","name":"putRequest","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"id":{"type":"string","mandatory":true,"default":""},"document":{"type":"any","mandatory":true,"default":null}}}},"components":{"RestServer":{"restServer":{"_id":"restServer","ip":"127.0.0.1","port":"8080","apiName":"/rest","pushEnabled":false,"fileStorageEnabled":false}},"FileStorage":{"fileStorage":{"_id":"fileStorage","status":"unloaded"}},"RuntimeChannel":{"channel":{"_id":"channel"}}},"_id":"134f61c924166c0"}