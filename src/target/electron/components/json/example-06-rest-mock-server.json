{"name":"Rest-Mock-Server","master":true,"subsystem":false,"version":"1.0.1","description":"Create a Rest mock server\n\n1. Create a schema, example 'Book', and add properties\n2. Create Book components\n3. Run the application\n4. Now you can send GET/POST/PUT/DELETE/PATCH requests to http://127.0.0.1:8080/rest/Book\n\nnote: because the running application and System Designer are synchronized, if you open the Components tab when performing the requests, you will see directly the modification on the panel (i.e. if you delete a component with a DELETE request, it will be removed from System Designer)","schemas":{"192b31826d11d82":{"_id":"192b31826d11d82","_name":"RestServer","_inherit":["RuntimeComponent"],"ip":"property","port":"property","apiName":"property","getContext":"method","onGet":"method","onPost":"method","onPut":"method","onDelete":"method","onPatch":"method","start":"method"}},"models":{"1219d183a917281":{"_id":"1219d183a917281","_name":"RestServer","start":{},"ip":{"type":"string","readOnly":false,"mandatory":false,"default":"127.0.0.1"},"port":{"type":"string","readOnly":false,"mandatory":false,"default":"8080"},"onGet":{"params":[{"name":"req","type":"object","mandatory":true,"default":null},{"name":"res","type":"object","mandatory":true,"default":null}]},"onPost":{"params":[{"name":"req","type":"object","mandatory":true,"default":null},{"name":"res","type":"object","mandatory":true,"default":null}]},"onPut":{"params":[{"name":"req","type":"object","mandatory":true,"default":null},{"name":"res","type":"object","mandatory":true,"default":null}]},"onDelete":{"params":[{"name":"req","type":"object","mandatory":true,"default":null},{"name":"res","type":"object","mandatory":true,"default":null}]},"onPatch":{"params":[{"name":"req","type":"object","mandatory":true,"default":null},{"name":"res","type":"object","mandatory":true,"default":null}]},"getContext":{"params":[{"name":"url","type":"string","mandatory":false,"default":""}],"result":"object"},"apiName":{"type":"string","readOnly":false,"mandatory":false,"default":"/"}}},"behaviors":{"16bb01bab613f08":{"_id":"16bb01bab613f08","component":"134f61c924166c0","state":"start","action":"function start() { \n\tthis.require('restServer').start();\n}","useCoreAPI":false,"core":false},"114291aef21b5b0":{"_id":"114291aef21b5b0","component":"RestServer","state":"start","action":"function start() {\n  var http = global.require('http'),\n    self = this;\n\n  // Create server\n  http.createServer(function (req, res) {\n    switch (req.method) {\n      case 'GET':\n        self.onGet(req, res);\n        break;\n      case 'DELETE':\n        self.onDelete(req, res);\n        break;\n      case 'POST':\n        self.onPost(req, res);\n        break;\n      case 'PUT':\n        self.onPut(req, res);\n        break;\n      case 'PATCH':\n        self.onPatch(req, res);\n        break;\n      default:\n        break;\n    }\n  }).listen(this.require('restServer').port(), this.require('restServer').ip());\n\n  this.require('logger').info('The server is started on http://' + this.require('restServer').ip() + ':' + this.require('restServer').port());\n}","useCoreAPI":false,"core":false},"1bff81ed951c3af":{"_id":"1bff81ed951c3af","component":"RestServer","state":"onGet","action":"function onGet(req, res) {\n  var search = [],\n    result = '',\n    context = null;\n\n  res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n  context = this.getContext(req.url);\n\n  if (context.valid) {\n    if (context.collection && $db[context.collection]) {\n      if (context.componentId) {\n        search = $db[context.collection].find({\n          '_id': context.componentId\n        });\n\n        if (search.length) {\n          search = search[0];\n          if (context.componentProp) { // get a component property\n            search = JSON.parse(JSON.stringify(search));\n            result = search[context.componentProp];\n          } else { // get a component\n            search = JSON.parse(JSON.stringify(search));\n            delete search.classInfo;\n            result = search;\n          }\n        } else {\n          result = '';\n          this.require('logger').warn('There is no document with _id ' + '\\'' + context.componentId + '\\â€™ (for the collection \\'' + context.collection + '\\')');\n        }\n      } else { // get a collection\n        result = [];\n\n        search = $db[context.collection].find();\n        search.forEach(function (val) {\n          var doc = val;\n\n          doc = JSON.parse(JSON.stringify(doc));\n          delete doc.classInfo;\n\n          result.push(doc);\n        });\n      }\n    }\n    \n    if (result === '') {\n      res.end('');\n    } else {\n      res.end(JSON.stringify(result));\n    }\n  } else {\n    res.end('');\n  }\n}","useCoreAPI":true,"core":false},"118a31de0915c2d":{"_id":"118a31de0915c2d","component":"RestServer","state":"onPost","action":"function onPost(req, res) {\n  var body = '',\n    qs = global.require('querystring'),\n    self = this;\n\n  req.on('data', function (data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      req.connection.destroy();\n    }\n  });\n\n  req.on('end', function () {\n    var post = qs.parse(body),\n      message = {},\n      comp = {},\n      tabid = [],\n      doc = {},\n      context = {};\n\n    context = self.require('restServer').getContext(req.url, post);\n\n    if (context.valid && context.collection && $db[context.collection] && !context.componentId && !context.componentProp) {\n\n      if (Object.keys(post).length) {\n        comp = JSON.parse(decodeURIComponent(Object.keys(post)[0]));\n      }\n\n      tabid = $db[context.collection].insert(comp);\n      doc = $db[context.collection].find({\n        '_id': tabid[0]\n      })[0];\n      doc = JSON.parse(JSON.stringify(doc));\n      delete doc.classInfo;\n\n      res.writeHead(201, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n      res.end(JSON.stringify(doc));\n    } else {\n      res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n      res.end('');\n    }\n  });\n}","useCoreAPI":true,"core":false},"1df2b18c751c378":{"_id":"1df2b18c751c378","component":"RestServer","state":"onDelete","action":"function onDelete(req, res) {\n  var context = this.getContext(req.url, res);\n\n  res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n\n  if (context.valid) {\n    if (context.collection && $db[context.collection]) {\n      if (context.componentId) {\n        $db[context.collection].remove({\n          '_id': context.componentId\n        });\n      } else {\n        $db[context.collection].remove();\n      }\n    }\n  }\n  \n  res.end('');\n}","useCoreAPI":true,"core":false},"1046c1f8661ce30":{"_id":"1046c1f8661ce30","component":"RestServer","state":"onPatch","action":"function onPatch(req, res) {\n  var body = '',\n    qs = global.require('querystring'),\n    self = this;\n\n  req.on('data', function (data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      req.connection.destroy();\n    }\n  });\n\n  req.on('end', function () {\n    var post = qs.parse(body),\n      message = {},\n      context = '',\n      comp = {},\n      doc = {};\n\n    res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n    \n    context = self.require('restServer').getContext(req.url, post);\n\n    if (context.valid && context.collection && $db[context.collection] && context.componentId) {\n      comp = {};\n      if (post) {\n        comp = JSON.parse(decodeURIComponent(Object.keys(post)[0]));\n      }\n      $db[context.collection].update({ '_id': context.componentId }, comp);\n      doc = $db[context.collection].find({\n        '_id': context.componentId\n      })[0];\n      doc = JSON.parse(JSON.stringify(doc));\n      delete doc.classInfo;\n      \n      res.end(JSON.stringify(doc));\n    } else {\n      res.end('');\n    }\n  });\n}","useCoreAPI":true,"core":false},"197ab1083e16aae":{"_id":"197ab1083e16aae","component":"RestServer","state":"getContext","action":"function getContext(url) {\n  var context = {\n    'collection': '',\n    'componentId': '',\n    'componentProp': '',\n    'valid': true\n  },\n    params = [],\n    i = 0,\n    length = 0,\n    apiName = this.apiName();\n    \n  if (url.indexOf('favicon.ico') === -1) {  \n    if (apiName === '') {\n      context.valid = false;\n      this.require('logger').warn('REST server needs an API name');\n    } else {\n      apiName = apiName + '/';\n      apiName = apiName.replace('//', '/');\n    \n      if (url.indexOf(apiName) !== -1) {\n        params = url.replace(apiName, '').split('/');\n        length = params.length;\n        for (i = 0; i < length; i++) {\n          if (i === 0) {\n            context.collection = params[i];\n          }\n          if (i === 1) {\n            context.componentId = params[i];\n          }\n          if (i === 2) {\n            context.componentProp = params[i];\n          }\n        }\n      } else {\n        context.valid = false;\n      }\n    }\n  }\n\n  return context;\n}","useCoreAPI":false,"core":false},"10b8e1470814b9a":{"_id":"10b8e1470814b9a","component":"RestServer","state":"onPut","action":"function onPut(req, res) {\n  var body = '',\n    qs = global.require('querystring'),\n    self = this;\n\n  req.on('data', function (data) {\n    body = body + data;\n    if (body.length > 1e6) {\n      req.connection.destroy();\n    }\n  });\n\n  req.on('end', function () {\n    var search = [],\n      post = qs.parse(body),\n      message = {},\n      comp = {},\n      tabid = [],\n      doc = {},\n      context = {};\n\n    res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n\n    context = self.require('restServer').getContext(req.url, post);\n\n    if (context.valid && context.collection && $db[context.collection] && context.componentId && !context.componentProp) {\n\n      if (Object.keys(post).length) {\n        comp = JSON.parse(decodeURIComponent(Object.keys(post)[0]));\n      }\n\n      search = $db[context.collection].find({\n        '_id': context.componentId\n      })\n\n      if (search.length) { // update\n\n        $db[context.collection].update({\n          '_id': context.componentId\n        }, comp);\n\n        doc = $db[context.collection].find({\n          '_id': context.componentId\n        })[0];\n        doc = JSON.parse(JSON.stringify(doc));\n        delete doc.classInfo;\n\n        res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n        res.end(JSON.stringify(doc));\n      } else { // create\n\n        comp._id = context.componentId;\n\n        $db[context.collection].insert(comp);\n\n        doc = $db[context.collection].find({\n          '_id': context.componentId\n        })[0];\n        doc = JSON.parse(JSON.stringify(doc));\n        delete doc.classInfo;\n\n        res.writeHead(201, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n        res.end(JSON.stringify(doc));\n      }\n    } else {\n      res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n      res.end('');\n    }\n  });\n}","useCoreAPI":true,"core":false}},"types":{},"components":{"RestServer":{"restServer":{"_id":"restServer","ip":"127.0.0.1","port":"8080","apiName":"/rest"}}},"_id":"134f61c924166c0"}