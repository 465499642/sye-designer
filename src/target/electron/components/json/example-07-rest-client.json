{"name":"REST-Client","master":true,"subsystem":false,"version":"1.0.0","description":"Create a REST client\n\n1. Create a schema, example 'Book', make it inherit from 'SyncComponent', add properties\n2. Create Book components\n3. Run the application\n4. Now all modications to Book components, will send POST/DELETE/PATCH requests to the server","schemas":{"p18852151e81b1e3":{"_id":"p18852151e81b1e3","_name":"RestClient","_inherit":["RuntimeComponent"],"ssl":"property","ip":"property","port":"property","apiName":"property","pushEnabled":"property"},"1723516a30132ac":{"_id":"1723516a30132ac","_name":"RuntimeDatabase","_inherit":["RuntimeComponent"],"_core":true,"insert":"event","update":"event","remove":"event"},"104ad1f48518376":{"_id":"104ad1f48518376","_name":"RuntimeChannel","_inherit":["RuntimeComponent"],"send":"event","serverDatabaseInsert":"event","serverDatabaseRemove":"event","serverDatabaseUpdate":"event"},"n1d0e31337a1a5f5":{"_id":"n1d0e31337a1a5f5","_name":"SyncComponent","_inherit":["RuntimeComponent"]},"k1d3c518b0317618":{"_id":"k1d3c518b0317618","_name":"HttpRequest","_inherit":["RuntimeComponent"],"post":"method","patch":"method","del":"method"},"h1edbe1d76e1a2e1":{"_id":"h1edbe1d76e1a2e1","_name":"PushRequest","_inherit":["RuntimeComponent"],"listen":"method"}},"models":{"y1f4fa12f37118ce":{"_id":"y1f4fa12f37118ce","_name":"RestClient","ip":{"type":"string","readOnly":false,"mandatory":false,"default":"127.0.0.1"},"port":{"type":"string","readOnly":false,"mandatory":false,"default":"8080"},"apiName":{"type":"string","readOnly":false,"mandatory":false,"default":"/rest"},"ssl":{"type":"boolean","readOnly":false,"mandatory":false,"default":false},"pushEnabled":{"type":"boolean","readOnly":false,"mandatory":false,"default":false}},"a18245170ae12e8b":{"_id":"a18245170ae12e8b","_name":"RuntimeDatabase","_core":true,"insert":{"params":[{"name":"event","type":"dbInsertEvent"}]},"update":{"params":[{"name":"event","type":"dbUpdateEvent"}]},"remove":{"params":[{"name":"event","type":"dbRemoveEvent"}]}},"f1c2361dfff1428f":{"_id":"f1c2361dfff1428f","_name":"RuntimeChannel","send":{"params":[{"name":"message","type":"message"}]},"serverDatabaseInsert":{"params":[{"name":"event","type":"dbInsertEvent","mandatory":false,"default":{}}]},"serverDatabaseRemove":{"params":[{"name":"event","type":"dbRemoveEvent","mandatory":false,"default":{}}]},"serverDatabaseUpdate":{"params":[{"name":"event","type":"dbUpdateEvent","mandatory":false,"default":{}}]}},"o1a56a137671baa8":{"_id":"o1a56a137671baa8","_name":"SyncComponent"},"p17f0f136c11bca0":{"_id":"p17f0f136c11bca0","_name":"HttpRequest","patch":{"params":[{"name":"collection","type":"string","mandatory":false,"default":""},{"name":"id","type":"string","mandatory":false,"default":""},{"name":"field","type":"string","mandatory":false,"default":""},{"name":"value","type":"string","mandatory":false,"default":""}]},"del":{"params":[{"name":"collection","type":"string","mandatory":false,"default":""},{"name":"id","type":"string","mandatory":false,"default":""}]},"post":{"params":[{"name":"collection","type":"string","mandatory":false,"default":""},{"name":"doc","type":"object","mandatory":false,"default":null}]}},"a16f401e3a41e134":{"_id":"a16f401e3a41e134","_name":"PushRequest","listen":{}}},"behaviors":{"p16272155eb1def6":{"_id":"p16272155eb1def6","component":"b199d91a7d310943","state":"start","action":"function start() { \n  if (this.require('restClient').pushEnabled()) {\n    this.require('pushRequest').listen();\n  }\n}","useCoreAPI":false,"core":false},"1de8c154bb18a01":{"_id":"1de8c154bb18a01","component":"RuntimeDatabase","state":"insert","action":"function insert(event) { \n  var logs = [],\n      lastInsertOrder = [];\n     \n  if ($metamodel.inheritFrom(event.collection, 'SyncComponent')) {\n\n    // search if last insert action before this one \n    // was a message from the server or not\n    logs = $db.RuntimeLog.find({\n      'action': 'insert',\n      'id': event.document._id\n    });\n    \n    logs.sort(function sort(logA, logB) {\n      return logA.order - logB.order;\n    });\n    lastInsertOrder = logs[0].order;\n    \n    logs = $db.RuntimeLog.find({\n      'order': lastInsertOrder - 1,\n      'collection': 'RuntimeMessage'\n    });\n\n    switch (true) {\n      case !logs[0]:\n      case logs[0] && \n           logs[0].value.event !== 'serverDatabaseInsert':\n      case logs[0] && logs[0].value.event === 'serverDatabaseInsert' && \n           logs[0].value.data[0].document._id !== event.document._id:\n          this.require('httpRequest').post(event.collection, event.document);\n        break;\n      default:\n        break;\n    }\n  }\n}","useCoreAPI":true,"core":false},"173ff13cde1c29e":{"_id":"173ff13cde1c29e","component":"RuntimeDatabase","state":"remove","action":"function remove(event) { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      body = '',\n      lastInsertOrder = -1,\n      systemId = this.require('runtime').system().id();\n      \n if ($metamodel.inheritFrom(event.collection, 'SyncComponent')) {\n  \n    // search if last remove action before this one \n    // was a message from the server or not\n    logs = $db.RuntimeLog.find({\n      'action': 'insert',\n      'id': event.document._id\n    });\n    \n    logs.sort(function sort(logA, logB) {\n      return logA.order - logB.order;\n    });\n    lastInsertOrder = logs[0].order;\n    \n    logs = $db.RuntimeLog.find({\n      'order': lastInsertOrder - 1,\n      'collection': 'RuntimeMessage'\n    });\n    \n    switch (true) {\n      case !logs[0]:\n      case logs[0] && \n           logs[0].value.event !== 'serverDatabaseRemove':\n      case logs[0] && logs[0].value.event === 'serverDatabaseRemove' && \n           logs[0].value.data[0].collection !== event.collection &&\n           logs[0].value.data[0].id !== event.id:\n        this.require('httpRequest').del(event.collection, event.id);\n        break;\n      default:\n        break;\n    }\n  }\t\n}","useCoreAPI":true,"core":false},"1e0a71b78c1fd0e":{"_id":"1e0a71b78c1fd0e","component":"RuntimeDatabase","state":"update","action":"function update(event) { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      body = {},\n      logs = [],\n      lastInsertOrder = -1,\n      systemId = this.require('runtime').system().id();\n      \nif ($metamodel.inheritFrom(event.collection, 'SyncComponent')) {\n  \n    // search if last insert action before this one \n    // was a message from the server or not\n    logs = $db.RuntimeLog.find({\n      'action': 'udpdate',\n      'id': event.document._id\n    });\n    \n    logs.sort(function sort(logA, logB) {\n      return logA.order - logB.order;\n    });\n    lastInsertOrder = logs[0].order;\n    \n    logs = $db.RuntimeLog.find({\n      'order': lastInsertOrder - 1,\n      'collection': 'RuntimeMessage'\n    });\n    \n    switch (true) {\n      case !logs[0]:\n      case logs[0] && \n           logs[0].value.event !== 'serverDatabaseUpdate':\n      case logs[0] && logs[0].value.event === 'serverDatabaseUpdate' && \n           logs[0].value.data[0].id !== event.id && \n           logs[0].value.data[0].field !== event.field &&\n           logs[0].value.data[0].value !== event.value:\n        this.require('httpRequest').patch(event.collection, event.id, event.field, event.value);\n        break;\n      default:\n        break;\n    }\n  }\n}","useCoreAPI":true,"core":false},"t1a74b1a3f8109c2":{"_id":"t1a74b1a3f8109c2","component":"RuntimeChannel","state":"serverDatabaseInsert","action":"function serverDatabaseInsert(event) { \n  var collection = this.require('db').collections()[event.collection],\n      result = [];\n    \n  result = collection.find({\n    '_id': event.document._id\n  });\n  \n  if (result.length === 0) {\n    collection.insert(event.document);\n  }\n}","useCoreAPI":false,"core":false},"v1189411f7619879":{"_id":"v1189411f7619879","component":"RuntimeChannel","state":"serverDatabaseRemove","action":"function serverDatabaseRemove(event) { \n  var collection = this.require('db').collections()[event.collection],\n      result = [];\n      \n  result = collection.find({\n    '_id': event.id\n  });\n  if (result.length !== 0) {\n    collection.remove(event.id);\n  }\n}","useCoreAPI":false,"core":false},"p1001b116f31e25b":{"_id":"p1001b116f31e25b","component":"RuntimeChannel","state":"serverDatabaseUpdate","action":"function serverDatabaseUpdate(event) { \n  var update = {},\n      collection = this.require('db').collections()[event.collection],\n      result = [],\n      doc = null;\n      \n  result = collection.find({\n    '_id': event.id\n  });\n  doc = result[0];\n\n  update[event.field] = event.value;\n  if (doc[event.field] !== event.value) {\n    collection.update({\n        '_id': event.id\n      },\n      update\n    );\t\n  }\n}","useCoreAPI":false,"core":false},"g13c27181741875d":{"_id":"g13c27181741875d","component":"HttpRequest","state":"patch","action":"function patch(collection, id, field, value) { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      systemId = this.require('runtime').system().id(),\n      body = {};\n  \n  if (restClient.ssl()) {\n    url = 'https://';\n  }\n  url = url + restClient.ip() + ':' + restClient.port() + '/' + restClient.apiName() + '/';\n  url = url.replace(/\\/\\//g, '/');\n  url = url + collection + '/' + id;\n  \n  body[field] = value;\n  \n  fetch(url, {\n    method: 'PATCH',\n    headers: new Headers({\n\t    'Content-Type': 'application/json',\n\t    'X-System-Id': systemId,\n\t    'X-System-Event': 'clientDatabaseUpdate'\n    }),\n    body: JSON.stringify(body)\n  });\n}","useCoreAPI":false,"core":false},"p1c13c187e715d33":{"_id":"p1c13c187e715d33","component":"HttpRequest","state":"del","action":"function del(collection, id) { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      systemId = this.require('runtime').system().id();  \n  \n  if (restClient.ssl()) {\n    url = 'https://';\n  }\n  url = url + restClient.ip() + ':' + restClient.port() + '/' + restClient.apiName() + '/';\n  url = url.replace(/\\/\\//g, '/');\n  url = url + collection + '/' + id;\n  \n  fetch(url, {\n    method: 'DELETE',\n    headers: new Headers({\n\t    'Content-Type': 'application/json',\n\t    'X-System-Id': systemId,\n\t    'X-System-Event': 'clientDatabaseRemove'\n    })\n  });\n}","useCoreAPI":false,"core":false},"x1997111f5e161ce":{"_id":"x1997111f5e161ce","component":"HttpRequest","state":"post","action":"function post(collection, doc) { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      systemId = this.require('runtime').system().id();\n  \n  if (restClient.ssl()) {\n    url = 'https://';\n  }\n  url = url + restClient.ip() + ':' + restClient.port() + '/' + restClient.apiName() + '/';\n  url = url.replace(/\\/\\//g, '/');\n  url = url + collection;\n  \n  fetch(url, {\n    method: 'POST',\n    headers: new Headers({\n\t    'Content-Type': 'application/json',\n\t    'X-System-Id': systemId,\n\t    'X-System-Event': 'clientDatabaseInsert'\n    }),\n    body: JSON.stringify(doc)\n  });\n}","useCoreAPI":false,"core":false},"g18f431534a1466a":{"_id":"g18f431534a1466a","component":"PushRequest","state":"listen","action":"function listen() { \n  var restClient = this.require('restClient'),\n      url = 'http://',\n      source = null;\n      \n  if (restClient.ssl()) {\n    url = 'https://';\n  }\n  url = url + restClient.ip() + ':' + restClient.port() + '/stream';\n  source = new EventSource(url);\n  \n  source.addEventListener('serverDatabaseInsert', function serverDatabaseInsert(event) {\n    this.require('runtime').message(JSON.parse(event.data));\n  }.bind(this));\n  \n  source.addEventListener('serverDataseRemove', function serverDataseRemove(event) {\n    this.require('runtime').message(JSON.parse(event.data));\n  }.bind(this));\n  \n  source.addEventListener('serverDataBaseUpdate', function serverDataBaseUpdate(event) {\n    this.require('runtime').message(JSON.parse(event.data));\n  }.bind(this));\n}","useCoreAPI":false,"core":false}},"types":{"dbUpdateEvent":{"_id":"1f5c41309711752","name":"dbUpdateEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"id":{"type":"string","mandatory":true,"default":""},"field":{"type":"string","mandatory":true,"default":""},"value":{"type":"any","mandatory":true,"default":null}}},"dbRemoveEvent":{"_id":"1952e1ac4213f4a","name":"dbRemoveEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"id":{"type":"string","mandatory":true,"default":""}}},"dbInsertEvent":{"_id":"148ef1e19810e6d","name":"dbInsertEvent","type":"object","schema":{"collection":{"type":"string","mandatory":true,"default":""},"document":{"type":"object","mandatory":true,"default":{}}}},"message":{"name":"message","type":"object","schema":{"event":{"type":"string","mandatory":true},"from":{"type":"string","mandatory":false},"data":{"type":"object","mandatory":true}},"core":true}},"components":{"RestClient":{"restClient":{"_id":"restClient","apiName":"/rest","ip":"127.0.0.1","port":"8080","ssl":false,"pushEnabled":true}},"RuntimeChannel":{"channel":{"_id":"channel"}},"HttpRequest":{"httpRequest":{"_id":"httpRequest"}},"PushRequest":{"pushRequest":{"_id":"pushRequest"}}},"_id":"b199d91a7d310943"}